# -*- coding: utf-8 -*-
# Author : hwijinkim , https://github.com/jeonghoonkang

# max_value를 찾고, 이에대한 max_value를 .py로 저장하기 위한 class 
# last modified by 20171106

import requests
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
import json
import copy
import numpy as np
import datetime
import time

USE_HTTP_API_PUT = False

def pack_dps(metric, dps, tags):
    pack = []
    #print 'tags : %s' % tags
    tag = {'metric': metric, 'tags': tags}

    for dp in dps:
        #print 'dp : %s' % dp
        sdp = copy.copy(tag)
        sdp['timestamp'] = int(dp.encode('utf8'))
        sdp['value'] = dps[dp]
        #print sdp
        pack.append(sdp)
    return pack

def requests_retry_session(
    retries=3,
    backoff_factor=0.3,
    status_forcelist=(500, 502, 504),
    session=None,
):
    session = session or requests.Session()
    retry = Retry(
        total=retries,
        read=retries,
        connect=retries,
        backoff_factor=backoff_factor,
        status_forcelist=status_forcelist,
    )
    adapter = HTTPAdapter(max_retries=retry)
    session.mount('http://', adapter)
    session.mount('https://', adapter)
    return session

def tsdb_query(query, start, end, metric, modem_num, holiday):
    param = {}
    if start: param['start'] = start
    if end: param['end'] = end
    param['m'] = metric + '{' + 'holiday={1!s},modem_num={0!s}'.format(modem_num, holiday) + '}'
    #print param
    if 1:
        response = requests.get(query, params=param)
        if response.ok:
            #print response.text
            return response.json()
        else:
            print 'request fails'
            return []
    else:
        try:
            response = requests_retry_session().get(query, params=param, timeout=5)
        except Exception as x:
            print 'requests timeout'
        else:
            if response.ok:
                #print response.text
                return response.json()
        return []
# 
# def tsdb_put(put, metric, dps, tags, file=None):
#     packed_data = pack_dps(metric, dps, tags)
#     for i in xrange(0, len(packed_data), 8):
#         tmp = json.dumps(packed_data[i:i+8])
#         #print tmp
#         if 0:
#             response = requests.post(put, data=tmp)
#         if response.text: print response.text
#         else:
#             try:
#                 response = requests_retry_session().post(put, data=tmp, timeout=5)
#             except Exception as x:
#                 print 'requests timeout'
#             else:
#                 if response.text: print response.text
#     return

def Find_ZeroValue(metric, dps, tags):
    packed_data = pack_dps(metric, dps, tags)

    #print 'packed_data : %s' % packed_data
    global sum_value
    
    for dp in packed_data:
        #print 'dp : %s' % dp
        if dp['value'] > 0.0 or dp['value'] == None:
            sum_value = 1
            #print 'sum_value : %s' % sum_value
            break

# MaxValue 기록함수
def Write_ZeroValue(led_zero_cnt, inv_zero_cnt, led_valid_cnt, inv_valid_cnt, led_vaild_list, inv_vaild_list, led_zero_list, inv_zero_list):
    f = open('zero_lists_18_0111_v2.txt', 'w')    # 경로설정 / 덮어쓰기
    f.write('led_valid_cnt : %d\n' % (led_valid_cnt-led_zero_cnt))
    f.write('led_zero_cnt : %s\n' % led_zero_cnt)
    f.write('inv_valid_cnt : %d\n' % (inv_valid_cnt-inv_zero_cnt))
    f.write('inv_zero_cnt : %s\n' % inv_zero_cnt)
    f.write('led_valid_list = %s\n' % led_vaild_list)
    f.write('inv_valid_list = %s\n' % inv_vaild_list)
    f.write('led_zero_list = %s\n' % led_zero_list)
    f.write('inv_zero_list = %s\n' % inv_zero_list)
    f.write('\n')
    f.close()

def ts2datetime(ts_str):
    return datetime.datetime.fromtimestamp(int(ts_str)).strftime('%Y/%m/%d-%H:%M:%S')

def datetime2ts(dt_str):
    dt = datetime.datetime.strptime(dt_str, "%Y/%m/%d-%H:%M:%S")
    return time.mktime(dt.timetuple())

def str2datetime(dt_str):
    return datetime.datetime.strptime(dt_str, "%Y/%m/%d-%H:%M:%S")

def datetime2str(dt):
    return dt.strftime('%Y/%m/%d-%H:%M:%S')

def add_time(dt_str, days=0, hours=0):
    return datetime2str(str2datetime(dt_str) + datetime.timedelta(days=days, hours=hours))

def is_past(dt_str1, dt_str2):
    return datetime2ts(dt_str1) < datetime2ts(dt_str2)

def is_weekend(dt_str):
    if str2datetime(dt_str).weekday() >= 5: return '1'
    else: return '0'

if __name__ == '__main__':
    # 1. 설정값 입력
    host  = '125.140.110.217'                                       # get할 url
    port  = 4242                                                    # get할 port 번호
    query = 'http://{0!s}:{1!r}/api/query'.format(host, port)       # opentsdb에서 get할 url 주소
    first = '2016/07/01-00:00:00'                                   # get 시작일
    last  = '2017/07/01-00:00:00'                                   # get 종료일
    metric_in  = 'none:rc05_excel_copy_tag_v8'                      # get할 metric명
    #metric_in  = 'sum:rc04_simple_data_v3'
    chk_number = 0                                                  # outlier 횟수
    save_outlier = 0.0
    max_dic = ''
    sum_value = 0.0
    
    led_zero_list = []
    inv_zero_list = []
    
    led_vaild_list = []
    inv_vaild_list = []
    
    led_zero_cnt = 0
    inv_zero_cnt = 0
    
    mart_zero_list = []
    apt_zero_list = []
    etc_zero_list = []
    
    mart_vaild_list = []
    apt_vaild_list = []
    etc_vaild_list = []
    
    mart_zero_cnt = 0
    apt_zero_cnt = 0
    etc_zero_cnt = 0
    
    fiber_zero_list = []
    school_zero_list = []
    food_zero_list = []
    sanyong_zero_list = []
    
    fiber_vaild_list = []
    school_vaild_list = []
    food_vaild_list = []
    sanyong_vaild_list = []
    
    fiber_zero_cnt = 0
    school_zero_cnt = 0
    food_zero_cnt = 0
    sanyong_zero_cnt = 0
    
    # 2. get할 metric에서 가져올 특정 list 설정
    #modem_list = ['01222799986', '01220800574', '01224230529', '01222714543', '01224230467', '01223239869', '01224230576', '01222679989', '01222746396', '01222746350', '01224230549', '01223192391', '01221343888', '01224230577', '01222729929', '01221574361', '01224230493', '01224230501', '01224272949', '01224230526', '01221386983', '01223239875', '01223239870', '01221451993', '01221251996', '01224230542', '01224230434', '01224230480', '01224230484', '01224230485', '01224230470', '01222746456', '01222742834', '01223219133', '01223219131', '01223219130', '01223219129', '01223192247', '01222745462', '01221574357', '01222699986', '01222742200', '01222649984', '01222754504', '01222739929', '01224230571', '01222674503', '01224230527', '01224230569', '01222669986', '01223187397', '01223209886', '01222764501', '01222742912', '01224272962', '01222745935', '01222745933', '01222745947', '01222742969', '01222742878', '01222746463', '01223239874', '01223239873', '01222704503', '01223187431', '01223187430', '01224272938', '01222745939', '01222674501', '01220684147', '01222694501', '01222734501', '01223187419', '01223188270', '01223189537', '01222769929', '01221574356', '01224230509', '01224230472', '01224230478', '01222746390', '01222745510', '01222719929', '01221574359', '01222746366', '01222779929', '01223239865', '01223219128', '01224230518', '01223187436', '01223188269', '01222754503', '01222742885', '01222745938', '01222724503', '01222704504', '01222742752', '01222694503', '01224230546', '01221341991', '01224224149', '01220800623', '01220435025', '01224230511', '01224230515', '01224230461', '01224230533', '01224230451', '01223209883', '01223209884', '01223219126', '01223209881', '01223192283', '01222654504', '01222755541', '01222766541', '01222709541', '01222744754', '01222719541', '01222739541', '01222587543', '01222666541', '01221291991', '01223192386', '01222714503', '01224230446', '01224230532', '01222667543', '01222764503', '01222586543', '01222684504', '01222699987', '01222742956', '01222684501', '01222699984', '01224230479', '01221731209', '01224230558', '01224230495', '01222739987', '01222739986', '01221388812', '01221388441', '01221721213', '01221961213', '01223187386', '01223192395', '01224273086', '01222567452', '01222587452', '01221566970', '01221566958', '01222714504', '01222664504', '01222676543', '01222742757', '01222647452', '01222744504', '01222749989', '01222746383', '01222776543', '01222745635', '01222597452', '01222745363', '01222779984', '01224230436', '01222758870', '01221474412', '01221474414', '01222779987', '01224273013', '01222745527', '01222745458', '01222664501', '01222779986', '01224230496', '01221566963', '01221574336', '01224230433', '01222767541', '01222742927', '01222742916', '01222689984', '01222687452', '01222742760', '01224230525', '01222797541', '01224230439', '01224272937', '01224272982', '01224230449', '01224230506', '01222746381', '01224230477', '01224273037', '01223192327', '01223192308', '01223192263', '01223192287', '01223192392', '01224230491', '01221421994', '01221441994', '01222749929', '01222659986', '01224230473', '01223187393', '01224230530', '01223239872', '01224230488', '01223187389', '01223209885', '01224273039', '01224273091', '01224230570', '01224272955', '01224230483', '01224230513', '01224230482', '01223239867', '01224230507', '01224230517', '01224273038', '01224230490', '01222704501', '01222798870', '01223239866', '01222754501', '01222709929', '01222748870', '01224230528', '01222683542', '01222664503', '01222654503', '01222674504', '01222746482', '012227694504', '01222719989', '01221448178', '01222744503', '01223192284', '01223187417', '01223187414', '01222759929', '01221311993', '01221243882', '01221361991', '01223192328', '01221371991', '01221474413', '01221273883', '01222654501', '01222799985', '01221253884', '01220800593', '01222742949', '01222746459', '01222684503', '01224230460', '01224230565', '01224230465', '01221388068', '01221391442', '01221391244', '01221391199', '01221391155', '01224230476', '01221574346', '01221567020', '01222765541', '01222734504', '01221566961', '01221566960', '01223189591', '01221566971', '01223187435', '01221574354', '01223188887', '01221574324', '01221567011', '01222742946', '01222636543', '01222659984', '01222745943', '01222563542', '01224230564', '01224230568', '01224230541', '01220800748', '01222744780', '01224230541', '01224230539', '01224230534', '01222745479', '01222729989', '01222577452', '01222746397', '01222779985', '01222769989', '01222729987', '01222688541', '01222618542', '01224230435', '01224230487', '01223209889', '01223209891', '01223209888', '01224230504', '01224230486', '01224230469', '01224230510', '01222746461', '01224230443', '01222796541', '01224230512', '01222742798', '01222746421', '01222753541', '01222744501', '01222749984', '01222749985', '01222742888', '01222742934', '01222788870', '01222746472', '01222597541', '01222769542', '01222616541', '01222742704', '01224230437', '01222724501', '01221283886', '01222564542', '01222742908', '01222745934', '01222745495', '01222745859', '01224230516', '01224230500', '01221390965', '01221387937', '01221474387', '01221351991', '01221431994', '01221261996', '01222769984', '01223187402', '01223187398', '01223187384', '01223187403', '01223187406', '01224272944', '01221429366', '01221429367', '01221429369', '01221471994', '01221474403', '01221474402', '01221474406', '01221474407', '01221341993', '01221371993', '01223192410', '01223192453', '01221243885', '01221243887', '01224230464', '01223192393', '01223192394', '01223187395', '01224230458', '01224230459', '01222746380', '01222794503', '01222759989', '01220800701', '01222734543', '01222747452', '01223187394', '01223187387', '01221463494', '01221429368', '01221390254', '01221388836', '01221474404', '01221474405', '01222789986', '01224230502', '01224273014', '01224272948', '01223187306', '01223187305', '01221392626', '01221392897', '01224272943', '01224273042', '01223187310', '01223187316', '01223181056', '01223181052', '01223187319', '01223192261', '01223187358', '01224230567', '01224273017', '01223187286', '01223180993', '01220553054', '01224273061', '01224273022', '01221392027', '01221389654', '01221390900', '01221387086', '01221387826', '01223187380', '01221399481', '01221393131', '01221393546', '01224273046', '01224273052', '01223239879', '01223239880', '01223239878', '01223239876', '01223192275', '01223192271', '01223192368', '01223192376', '01223192373', '01223181052', '01223181049', '01224273085', '01224273018', '01224273092', '01224273096', '01223180966', '01223180976', '01224230447', '01224230455', '01224230466', '01224230441', '01224230521', '01224272948', '01224273045', '01224272958', '01224230559', '01224273026', '01224273079', '01224272971', '01223192371', '01223187370', '01223192249', '01220800675', '01224272988']    
    # led_cnt = 401
    #led_list = [u'01222799986', u'01220800574', u'01224230529', u'01222714543', u'01224230467', u'01223239869', u'01224230576', u'01222679989', u'01222746396', u'01222746350', u'01224230549', u'01224224135', u'01224273071', u'01224272966', u'01223192391', u'01221343888', u'01224230577', u'01222729929', u'01221574361', u'01224230493', u'01224230501', u'01224272949', u'01224230526', u'01221386983', u'01223239875', u'01223239870', u'01221451993', u'01221251996', u'01224230542', u'01224230434', u'01224230480', u'01224230484', u'01224230485', u'01224230470', u'01222746456', u'01222742834', u'01223219133', u'01223219131', u'01223219130', u'01223219129', u'01223192247', u'01222745462', u'01221574357', u'01222699986', u'01222742200', u'01222649984', u'01222754504', u'01222739929', u'01224230571', u'01222674503', u'01224230527', u'01224230531', u'01224230569', u'01222669986', u'01223187397', u'01223209886', u'01222764501', u'01222742912', u'01224272962', u'01222745935', u'01222745933', u'01222745947', u'01222742969', u'01222742878', u'01222746463', u'01223239874', u'01223239873', u'01222704503', u'01223187431', u'01223187430', u'01224272938', u'01222745939', u'01222674501', u'01220684147', u'01222694501', u'01222734501', u'01223187419', u'01223188270', u'01223189537', u'01222769929', u'01221574356', u'01224230509', u'01224230472', u'01224230478', u'01222746390', u'01222745510', u'01222719929', u'01221574359', u'01222746366', u'01222779929', u'01223239865', u'01223219128', u'01224230518', u'01223187436', u'01223188269', u'01222754503', u'01222742885', u'01222745938', u'01222724503', u'01222704504', u'01222742752', u'01222694503', u'01224230546', u'01221341991', u'01224224149', u'01220800623', u'01220435025', u'01224230511', u'01224230515', u'01224230461', u'01224230533', u'01224230451', u'01223209883', u'01223209884', u'01223219126', u'01223209881', u'01223192283', u'01222654504', u'01222755541', u'01222766541', u'01222709541', u'01222744754', u'01222719541', u'01222739541', u'01222587543', u'01222666541', u'01221291991', u'01223192386', u'01222714503', u'01224230446', u'01224230532', u'01222667543', u'01222764503', u'01222586543', u'01222684504', u'01222699987', u'01222742956', u'01222684501', u'01222699984', u'01224230479', u'01221731209', u'01224230558', u'01224230495', u'01222739987', u'01222739986', u'01221388812', u'01221388441', u'01221721213', u'01221961213', u'01223187386', u'01223192395', u'01224273086', u'01222567452', u'01222587452', u'01221566970', u'01221566958', u'01222714504', u'01222664504', u'01222676543', u'01222742757', u'01222647452', u'01222744504', u'01222749989', u'01222746383', u'01222776543', u'01222745635', u'01222597452', u'01222745363', u'01222779984', u'01224230436', u'01222758870', u'01221474412', u'01221474414', u'01222779987', u'01224273013', u'01222745527', u'01222745458', u'01222664501', u'01222779986', u'01224230496', u'01221566963', u'01221574336', u'01224230433', u'01222767541', u'01222742927', u'01222742916', u'01222689984', u'01222687452', u'01222742760', u'01224230525', u'01222797541', u'01224230439', u'01224272937', u'01224272982', u'01224230449', u'01220800592', u'01224230457', u'01224230506', u'01222746381', u'01224230477', u'01224273037', u'01223192327', u'01223192308', u'01223192263', u'01223192287', u'01223192392', u'01224230491', u'01221421994', u'01221441994', u'01222749929', u'01224230551', u'01224273073', u'01222659986', u'01224230473', u'01223187393', u'01224230530', u'01223239872', u'01224230488', u'01223187389', u'01223209885', u'01224273039', u'01224273091', u'01224230570', u'01224272955', u'01224230483', u'01224230513', u'01224230482', u'01223239867', u'01224230507', u'01224230517', u'01224273038', u'01224230490', u'01222704501', u'01222798870', u'01223239866', u'01222754501', u'01222709929', u'01222748870', u'01224230528', u'01222683542', u'01222664503', u'01222654503', u'01222674504', u'01222746482', u'012227694504', u'01222719989', u'01221448178', u'01222744503', u'01223192284', u'01223187417', u'01223187414', u'01222759929', u'01221311993', u'01221243882', u'01221361991', u'01223192328', u'01221371991', u'01221474413', u'01221273883', u'01222654501', u'01222799985', u'01221253884', u'01220800593', u'01222742949', u'01222746459', u'01222684503', u'01224230460', u'01224230565', u'01224230465', u'01221388068', u'01221391442', u'01221391244', u'01221391199', u'01221391155', u'01224230476', u'01221574346', u'01221567020', u'01222765541', u'01222734504', u'01221566961', u'01221566960', u'01223189591', u'01221566971', u'01223187435', u'01221574354', u'01223188887', u'01221574324', u'01221567011', u'01222742946', u'01222636543', u'01222659984', u'01222745943', u'01222563542', u'01224230564', u'01224230568', u'01224230541', u'01220800748', u'01222744780', u'01224230541', u'01224230539', u'01224230534', u'01222745479', u'01222729989', u'01222577452', u'01222746397', u'01222779985', u'01222769989', u'01222729987', u'01222688541', u'01222618542', u'01224230435', u'01224230487', u'01223209889', u'01223209891', u'01223209888', u'01224230489', u'01224230504', u'01224230486', u'01224230469', u'01224230510', u'01222746461', u'01224230443', u'01222796541', u'01224230512', u'01222742798', u'01222746421', u'01222753541', u'01222744501', u'01222749984', u'01222749985', u'01222742888', u'01222742934', u'01222788870', u'01222746472', u'01222597541', u'01222769542', u'01222616541', u'01222742704', u'01224230437', u'01223209890', u'01222724501', u'01221283886', u'01222564542', u'01222742908', u'01222745934', u'01222745495', u'01222745859', u'01224230516', u'01224230500', u'01221390965', u'01221387937', u'01221474387', u'01221351991', u'01221431994', u'01221261996', u'01223239871', u'01223239868', u'01224230575', u'01224230573', u'01222769984', u'01223187402', u'01223187398', u'01223187384', u'01223187403', u'01223187406', u'01224272944', u'01221429366', u'01221429367', u'01221429369', u'01221471994', u'01221474403', u'01221474402', u'01221474406', u'01221474407', u'01221341993', u'01221371993', u'01223192410', u'01223192453', u'01221243885', u'01221243887', u'01224230464', u'01223192393', u'01223192394', u'01223187395', u'01224230458', u'01224230459', u'01222746380', u'01222794503', u'01222759989', u'01220800701', u'01222734543', u'01222747452', u'01223187394', u'01223187387', u'01221463494', u'01221429368', u'01221390254', u'01221388836', u'01221474404', u'01221474405', u'01222789986']
    # led_cnt = 69
    #inv_list = [u'01224230502', u'01224273014', u'01224272948', u'01223187306', u'01223187305', u'01221392626', u'01221392897', u'01224272943', u'01224273042', u'01223187310', u'01223187316', u'01223181056', u'01223181052', u'01223187319', u'01223192261', u'01223187358', u'01224230567', u'01224273017', u'01223187286', u'01223180993', u'01220553054', u'01224273061', u'01224273022', u'01221392027', u'01221389654', u'01221390900', u'01221387086', u'01221387826', u'01223187380', u'01221399481', u'01221393131', u'01221393546', u'01224273046', u'01224273052', u'01223239879', u'01223239880', u'01223239878', u'01223239876', u'01223192275', u'01223192271', u'01223192368', u'01223192376', u'01223192373', u'01224230548', u'01223181052', u'01223181049', u'01224273085', u'01224273018', u'01224273092', u'01224273096', u'01224273087', u'01223180966', u'01223180976', u'01224230447', u'01224230455', u'01224230466', u'01224230441', u'01224230521', u'01224272948', u'01224273045', u'01224272958', u'01224230559', u'01224273026', u'01224273079', u'01224272971', u'01223192371', u'01223187370', u'01223192249', u'01220800675', u'01224272988']   
    
    # led_cnt = 400
    #led_list = [u'01222799986', u'01220800574', u'01224230529', u'01222714543', u'01224230467', u'01223239869', u'01224230576', u'01222679989', u'01222746396', u'01222746350', u'01224230549', u'01224224135', u'01224273071', u'01224272966', u'01223192391', u'01221343888', u'01224230577', u'01222729929', u'01221574361', u'01224230493', u'01224230501', u'01224272949', u'01224230526', u'01221386983', u'01223239875', u'01223239870', u'01221451993', u'01221251996', u'01224230542', u'01224230434', u'01224230480', u'01224230484', u'01224230485', u'01224230470', u'01222746456', u'01222742834', u'01223219133', u'01223219131', u'01223219130', u'01223219129', u'01223192247', u'01222745462', u'01221574357', u'01222699986', u'01222742200', u'01222649984', u'01222754504', u'01222739929', u'01224230571', u'01222674503', u'01224230527', u'01224230531', u'01224230569', u'01222669986', u'01223187397', u'01223209886', u'01222764501', u'01222742912', u'01224272962', u'01222745935', u'01222745933', u'01222745947', u'01222742969', u'01222742878', u'01222746463', u'01223239874', u'01223239873', u'01222704503', u'01223187431', u'01223187430', u'01224272938', u'01222745939', u'01222674501', u'01220684147', u'01222694501', u'01222734501', u'01223187419', u'01223188270', u'01223189537', u'01222769929', u'01221574356', u'01224230509', u'01224230472', u'01224230478', u'01222746390', u'01222745510', u'01222719929', u'01221574359', u'01222746366', u'01222779929', u'01223239865', u'01223219128', u'01224230518', u'01223187436', u'01223188269', u'01222754503', u'01222742885', u'01222745938', u'01222724503', u'01222704504', u'01222742752', u'01222694503', u'01224230546', u'01221341991', u'01224224149', u'01220800623', u'01220435025', u'01224230511', u'01224230515', u'01224230461', u'01224230533', u'01224230451', u'01223209883', u'01223209884', u'01223219126', u'01223209881', u'01223192283', u'01222654504', u'01222755541', u'01222766541', u'01222709541', u'01222744754', u'01222719541', u'01222739541', u'01222587543', u'01222666541', u'01221291991', u'01223192386', u'01222714503', u'01224230446', u'01224230532', u'01222667543', u'01222764503', u'01222586543', u'01222684504', u'01222699987', u'01222742956', u'01222684501', u'01222699984', u'01224230479', u'01221731209', u'01224230558', u'01224230495', u'01222739987', u'01222739986', u'01221388812', u'01221388441', u'01221721213', u'01221961213', u'01223187386', u'01223192395', u'01224273086', u'01222567452', u'01222587452', u'01221566970', u'01221566958', u'01222714504', u'01222664504', u'01222676543', u'01222742757', u'01222647452', u'01222744504', u'01222749989', u'01222746383', u'01222776543', u'01222745635', u'01222597452', u'01222745363', u'01222779984', u'01224230436', u'01222758870', u'01221474412', u'01221474414', u'01222779987', u'01224273013', u'01222745527', u'01222745458', u'01222664501', u'01222779986', u'01224230496', u'01221566963', u'01221574336', u'01224230433', u'01222767541', u'01222742927', u'01222742916', u'01222689984', u'01222687452', u'01222742760', u'01224230525', u'01222797541', u'01224230439', u'01224272937', u'01224272982', u'01224230449', u'01220800592', u'01224230457', u'01224230506', u'01222746381', u'01224230477', u'01224273037', u'01223192327', u'01223192308', u'01223192263', u'01223192287', u'01223192392', u'01224230491', u'01221421994', u'01221441994', u'01222749929', u'01224230551', u'01224273073', u'01222659986', u'01224230473', u'01223187393', u'01224230530', u'01223239872', u'01224230488', u'01223187389', u'01223209885', u'01224273039', u'01224273091', u'01224230570', u'01224272955', u'01224230483', u'01224230513', u'01224230482', u'01223239867', u'01224230507', u'01224230517', u'01224273038', u'01224230490', u'01222704501', u'01222798870', u'01223239866', u'01222754501', u'01222709929', u'01222748870', u'01224230528', u'01222683542', u'01222664503', u'01222654503', u'01222674504', u'01222746482', u'012227694504', u'01222719989', u'01221448178', u'01222744503', u'01223192284', u'01223187417', u'01223187414', u'01222759929', u'01221311993', u'01221243882', u'01221361991', u'01223192328', u'01221371991', u'01221474413', u'01221273883', u'01222654501', u'01222799985', u'01221253884', u'01220800593', u'01222742949', u'01222746459', u'01222684503', u'01224230460', u'01224230565', u'01224230465', u'01221388068', u'01221391442', u'01221391244', u'01221391199', u'01221391155', u'01224230476', u'01221574346', u'01221567020', u'01222765541', u'01222734504', u'01221566961', u'01221566960', u'01223189591', u'01221566971', u'01223187435', u'01221574354', u'01223188887', u'01221574324', u'01221567011', u'01222742946', u'01222636543', u'01222659984', u'01222745943', u'01222563542', u'01224230564', u'01224230568', u'01220800748', u'01222744780', u'01224230541', u'01224230539', u'01224230534', u'01222745479', u'01222729989', u'01222577452', u'01222746397', u'01222779985', u'01222769989', u'01222729987', u'01222688541', u'01222618542', u'01224230435', u'01224230487', u'01223209889', u'01223209891', u'01223209888', u'01224230489', u'01224230504', u'01224230486', u'01224230469', u'01224230510', u'01222746461', u'01224230443', u'01222796541', u'01224230512', u'01222742798', u'01222746421', u'01222753541', u'01222744501', u'01222749984', u'01222749985', u'01222742888', u'01222742934', u'01222788870', u'01222746472', u'01222597541', u'01222769542', u'01222616541', u'01222742704', u'01224230437', u'01223209890', u'01222724501', u'01221283886', u'01222564542', u'01222742908', u'01222745934', u'01222745495', u'01222745859', u'01224230516', u'01224230500', u'01221390965', u'01221387937', u'01221474387', u'01221351991', u'01221431994', u'01221261996', u'01223239871', u'01223239868', u'01224230575', u'01224230573', u'01222769984', u'01223187402', u'01223187398', u'01223187384', u'01223187403', u'01223187406', u'01224272944', u'01221429366', u'01221429367', u'01221429369', u'01221471994', u'01221474403', u'01221474402', u'01221474406', u'01221474407', u'01221341993', u'01221371993', u'01223192410', u'01223192453', u'01221243885', u'01221243887', u'01224230464', u'01223192393', u'01223192394', u'01223187395', u'01224230458', u'01224230459', u'01222746380', u'01222794503', u'01222759989', u'01220800701', u'01222734543', u'01222747452', u'01223187394', u'01223187387', u'01221463494', u'01221429368', u'01221390254', u'01221388836', u'01221474404', u'01221474405', u'01222789986']

    # 01224272948, 01223181052 - (중복 모뎀넘버 2개씩 있었음, 밑은 지운 lists)
    # inv_cnt = 68
    #inv_list = [u'01224230502', u'01224273014', u'01223187306', u'01223187305', u'01221392626', u'01221392897', u'01224272943', u'01224273042', u'01223187310', u'01223187316', u'01223181056', u'01223187319', u'01223192261', u'01223187358', u'01224230567', u'01224273017', u'01223187286', u'01223180993', u'01220553054', u'01224273061', u'01224273022', u'01221392027', u'01221389654', u'01221390900', u'01221387086', u'01221387826', u'01223187380', u'01221399481', u'01221393131', u'01221393546', u'01224273046', u'01224273052', u'01223239879', u'01223239880', u'01223239878', u'01223239876', u'01223192275', u'01223192271', u'01223192368', u'01223192376', u'01223192373', u'01224230548', u'01223181052', u'01223181049', u'01224273085', u'01224273018', u'01224273092', u'01224273096', u'01224273087', u'01223180966', u'01223180976', u'01224230447', u'01224230455', u'01224230466', u'01224230441', u'01224230521', u'01224272948', u'01224273045', u'01224272958', u'01224230559', u'01224273026', u'01224273079', u'01224272971', u'01223192371', u'01223187370', u'01223192249', u'01220800675', u'01224272988']    
    
    #led_list = ['01220800653', '01220824131', '01220800754', '01220435097', '01220674104', '01224224145', '01220674127', '01220824133', '01220435017', '01224230474', '01220435137', '01220435096', '01220800670', '01220800666', '01220434991', '01220474138', '01224230503', '01220674054', '01224224148', '01224230475', '01224224146', '01224224137', '01220674137', '01220674059', '01220800665', '01220674126', '01220435087', '01220674124', '01220674132', '01220800616', '01220674131', '01220800605', '01220800760', '01220674072', '01220674143', '01220435120', '01220800759', '01220674158', '01220800639', '01220674148', '01220674057', '01220435112', '01220674074', '01220435048', '01220674092', '01220800673', '01220674097', '01220800667', '01220674063', '01220800725', '01224230497', '01220674129', '01220674103', '01220800629', '01224224126', '01224224143', '01224224147', '01224230492', '01220674066', '01224230462', '01224230498', '01220674091', '01220674158', '01220800715', '01220674062', '01220674068', '01220435110', '01220435075', '01220824145', '01222718541', '01222699985', '01222649986', '01222789985', '01222669984', '01222598541', '01222677452', '01222699541', '01222799989', '01222749987', '01222789987', '01222577541', '01222708541', '01222726543', '01222731541', '01222744759', '01222719985', '01222671541', '01222628541', '01222757452', '01222627543', '01222588541', '01222709987', '01222649989', '01222729984']
    
    led_list = ['01222799986', '01220800574', '01224230529', '01222714543', '01224230467', '01223239869', '01224230576', '01222679989', '01222746396', '01222746350', '01224230549', '01224224135', '01224273071', '01224272966', '01223192391', '01221343888', '01224230577', '01222729929', '01221574361', '01224230493', '01224230501', '01224272949', '01224230526', '01221386983', '01223239875', '01223239870', '01221451993', '01221251996', '01224230542', '01224230434', '01224230480', '01224230484', '01224230485', '01224230470', '01222746456', '01222742834', '01223219133', '01223219131', '01223219130', '01223219129', '01223192247', '01222745462', '01221574357', '01222699986', '01222742200', '01222649984', '01222754504', '01222739929', '01224230571', '01222674503', '01224230527', '01224230531', '01224230569', '01222669986', '01223187397', '01223209886', '01222764501', '01222742912', '01224272962', '01222745935', '01222745933', '01222745947', '01222742969', '01222742878', '01222746463', '01223239874', '01223239873', '01222704503', '01223187431', '01223187430', '01224272938', '01222745939', '01222674501', '01220684147', '01222694501', '01222734501', '01223187419', '01223188270', '01223189537', '01222769929', '01221574356', '01224230509', '01224230472', '01224230478', '01222746390', '01222745510', '01222719929', '01221574359', '01222746366', '01222779929', '01223239865', '01223219128', '01224230518', '01223187436', '01223188269', '01222754503', '01222742885', '01222745938', '01222724503', '01222704504', '01222742752', '01222694503', '01224230546', '01221341991', '01224224149', '01220800623', '01220435025', '01224230511', '01224230515', '01224230461', '01224230533', '01224230451', '01223209883', '01223209884', '01223219126', '01223209881', '01223192283', '01222654504', '01222755541', '01222766541', '01222709541', '01222744754', '01222719541', '01222739541', '01222587543', '01222666541', '01221291991', '01223192386', '01222714503', '01224230446', '01224230532', '01222667543', '01222764503', '01222586543', '01222684504', '01222699987', '01222742956', '01222684501', '01222699984', '01224230479', '01221731209', '01224230558', '01224230495', '01222739987', '01222739986', '01221388812', '01221388441', '01221721213', '01221961213', '01223187386', '01223192395', '01224273086', '01222567452', '01222587452', '01221566970', '01221566958', '01222714504', '01222664504', '01222676543', '01222742757', '01222647452', '01222744504', '01222749989', '01222746383', '01222776543', '01222745635', '01222597452', '01222745363', '01222779984', '01224230436', '01222758870', '01221474412', '01221474414', '01222779987', '01224273013', '01222745527', '01222745458', '01222664501', '01222779986', '01224230496', '01221566963', '01221574336', '01224230433', '01222767541', '01222742927', '01222742916', '01222689984', '01222687452', '01222742760', '01224230525', '01222797541', '01224230439', '01224272937', '01224272982', '01224230449', '01220800592', '01224230457', '01224230506', '01222746381', '01224230477', '01224273037', '01223192327', '01223192308', '01223192263', '01223192287', '01223192392', '01224230491', '01221421994', '01221441994', '01222749929', '01224230551', '01224273073', '01222659986', '01224230473', '01223187393', '01224230530', '01223239872', '01224230488', '01223187389', '01223209885', '01224273039', '01224273091', '01224230570', '01224272955', '01224230483', '01224230513', '01224230482', '01223239867', '01224230507', '01224230517', '01224273038', '01224230490', '01222704501', '01222798870', '01223239866', '01222754501', '01222709929', '01222748870', '01224230528', '01222683542', '01222664503', '01222654503', '01222674504', '01222746482', '012227694504', '01222719989', '01221448178', '01222744503', '01223192284', '01223187417', '01223187414', '01222759929', '01221311993', '01221243882', '01221361991', '01223192328', '01221371991', '01221474413', '01221273883', '01222654501', '01222799985', '01221253884', '01220800593', '01222742949', '01222746459', '01222684503', '01224230460', '01224230565', '01224230465', '01221388068', '01221391442', '01221391244', '01221391199', '01221391155', '01224230476', '01221574346', '01221567020', '01222765541', '01222734504', '01221566961', '01221566960', '01223189591', '01221566971', '01223187435', '01221574354', '01223188887', '01221574324', '01221567011', '01222742946', '01222636543', '01222659984', '01222745943', '01222563542', '01224230564', '01224230568', '01224230541', '01220800748', '01222744780', '01224230541', '01224230539', '01224230534', '01222745479', '01222729989', '01222577452', '01222746397', '01222779985', '01222769989', '01222729987', '01222688541', '01222618542', '01224230435', '01224230487', '01223209889', '01223209891', '01223209888', '01224230489', '01224230504', '01224230486', '01224230469', '01224230510', '01222746461', '01224230443', '01222796541', '01224230512', '01222742798', '01222746421', '01222753541', '01222744501', '01222749984', '01222749985', '01222742888', '01222742934', '01222788870', '01222746472', '01222597541', '01222769542', '01222616541', '01222742704', '01224230437', '01223209890', '01222724501', '01221283886', '01222564542', '01222742908', '01222745934', '01222745495', '01222745859', '01224230516', '01224230500', '01221390965', '01221387937', '01221474387', '01221351991', '01221431994', '01221261996', '01223239871', '01223239868', '01224230575', '01224230573', '01222769984', '01223187402', '01223187398', '01223187384', '01223187403', '01223187406', '01224272944', '01221429366', '01221429367', '01221429369', '01221471994', '01221474403', '01221474402', '01221474406', '01221474407', '01221341993', '01221371993', '01223192410', '01223192453', '01221243885', '01221243887', '01224230464', '01223192393', '01223192394', '01223187395', '01224230458', '01224230459', '01222746380', '01222794503', '01222759989', '01220800701', '01222734543', '01222747452', '01223187394', '01223187387', '01221463494', '01221429368', '01221390254', '01221388836', '01221474404', '01221474405', '01222789986', '01220674064', '01222615541', '01220674076', '01220674061', '01220800602', '01221273880', '01220800591', '01220674093', '01220674088', '01222689542', '01220800573', '01221474395', '01222674541', '01221446681', '01220800684', '01222751542', '01222603542', '01220674121', '01220674078', '01220674112', '01222664541', '01222691541', '01222753542', ' 01220435022', '01220674094', '01222774542', '01221474396', '01221474399', '01221474401', '01220674085', '01221429372', '01220674157', '01221474397', '01221429374', '01221429371', '01221446671', '01222594541', '01221401991', '01220800716', '01220674084', '01222687542', '01221331991', '01220800763', '01221411991', '01221431991', '01221461994', '01220674095', '01220800669', '01220435093', '01221441991', '01221241996', '01221391991', '01221381991', '01221301996']
    inv_list = ['01223192096', '01223187332', '01224230502', '01223299440', '01224273014', '01224272948', '01223187306', '01223187305', '01221392626', '01221392897', '01223299434', '01223219093', '01223219092', '01224272943', '01224273042', '01223209869', '01223299433', '01223192279', '01223187310', '01223187316', '01223187276', '01223299435', '01223299431', '01223209868', '01223181056', '01223181052', '01223187319', '01223192261', '01223187358', '01224230567', '01224273017', '01223187286', '01223180993', '01223299439', '01220553054', '01224273061', '01224273022', '01223209866', '01221392027', '01221389654', '01223187357', '01221390900', '01221387086', '01221387826', '01223187380', '01221399481', '01221393131', '01221393546', '01224273046', '01224273052', '01223239879', '01223239880', '01223239878', '01223239876', '01223192275', '01223192271', '01223192368', '01223192376', '01223192373', '01224230548', '01223181052', '01223181049', '01223219090', '01223187314', '01224273085', '01224273018', '01224273092', '01224273096', '01224273087', '01223180968', '01223180966', '01223180976', '01223181061', '01224230447', '01224230455', '01224230466', '01224230441', '01224230521', '01224272948', '01224273045', '01223299438', '01224272958', '01223180994', '01224230559', '01223219089', '01224273026', '01224273079', '01224272971', '01223192371', '01223187370', '01223192249', '01220800675', '01224272988', '01223299442', '01223299430']
    
    # total_metalhalide : 5
    #pure_mart_list = ['01224224149', '01220800623', '01220435025', '01224230511', '01224230473']
    
    # total_heungwanglamp : 21
    #pure_apt_list = ['01224230533', '01224230436', '01224230439', '01224230528', '01220800593', '01224230465', '01224230564', '01224230541', '01220800748', '01224230541', '01224230539', '01224230534', '01224230435', '01224230489', '01224230504', '01224230486', '01224230469', '01224230510', '01224230443', '01224230512', '01224230437']
    
    #print '<총 {0!r}개의 metalhalide와 {1!r}개의 heungwanglamp 데이터 추출>\n'.format(len(led_list), len(inv_list))

    led_count = 0                               # lte 처리 갯수
    inv_count = 0
    start_time = datetime.datetime.now()        # 프로그램 시작값

    # 3. 입력된 list를 for문으로 하나씩 get함
    # 4. get한 list에서 얻은 한달치 value값을 비교
    # 5. 설정한 outlier값과 같거나 이상일시 txt로 log기록 및 print 출력
    ### 시작일 ~ 끝일까지 하루 data씩 get (get data 많으면 opentsdb가 timeout될 수 있기 때문에)
    for led in led_list:
        print led
        #iterate every days and must be started w/ start of the day
        sum_value = 0
        tmp_time = datetime.datetime.now()
        end = first
        while is_past(end, last):
            start = end
            end = add_time(start, days=1)
            modem_holiday = is_weekend(start)
            query_result = tsdb_query(query, start, end, metric_in, led, modem_holiday)
            for group in query_result:
                if sum_value < 1: # value가 0일때만 실행 - dps['value']값이 0일때
                    Find_ZeroValue(metric_in, group['dps'], group['tags'])
                else:             # value가 0이 아닐때 빠져나옴  - dps['value']값이 0이 아닐때
                    break
        if sum_value == 0:
            led_zero_cnt += 1
            led_zero_list.append(led)
        if sum_value > 0:
            led_vaild_list.append(led)
        led_count += 1
        print 'elapsed time: {0!s}, {1!s}'.format(datetime.datetime.now() - tmp_time, datetime.datetime.now() - start_time)
        print '<총 {0!r}/{1!r}개의 led 데이터 처리>\n'.format(led_count, len(led_list))
    print 'total elapsed time: {0!s}'.format(datetime.datetime.now() - start_time)
    
    # 3. 입력된 list를 for문으로 하나씩 get함
    # 4. get한 list에서 얻은 한달치 value값을 비교
    # 5. 설정한 outlier값과 같거나 이상일시 txt로 log기록 및 print 출력
    ### 시작일 ~ 끝일까지 하루 data씩 get (get data 많으면 opentsdb가 timeout될 수 있기 때문에)

    for inv in inv_list:
        print inv
        #iterate every days and must be started w/ start of the day
        sum_value = 0
        tmp_time = datetime.datetime.now()
        end = first
        while is_past(end, last):
            start = end
            end = add_time(start, days=1)
            modem_holiday = is_weekend(start)
            query_result = tsdb_query(query, start, end, metric_in, inv, modem_holiday)
            for group in query_result:
                if sum_value < 1: # value가 0일때만 실행 - dps['value']값이 0일때
                    Find_ZeroValue(metric_in, group['dps'], group['tags'])
                else:             # value가 0이 아닐때 빠져나옴  - dps['value']값이 0이 아닐때
                    break
        if sum_value == 0:
            inv_zero_cnt += 1
            inv_zero_list.append(inv)
        if sum_value > 0:
            inv_vaild_list.append(inv)
        inv_count += 1
        print 'elapsed time: {0!s}, {1!s}'.format(datetime.datetime.now() - tmp_time, datetime.datetime.now() - start_time)
        print '<총 {0!r}/{1!r}개의 factory {2!r}/{3!r}개의 office 데이터 처리>\n'.format(led_count, len(led_list), inv_count, len(inv_list))
    
    print 'led zero_cnt : %s' % led_zero_cnt
    print 'led_zero = %s' % led_zero_list
    print 'led valid_cnt : %s' % (len(led_list) - led_zero_cnt)
    print 'led_valid = %s' % led_vaild_list
    
    print 'inv zero_cnt : %s' % inv_zero_cnt
    print 'inv_zero = %s' % inv_zero_list
    print 'inv valid_cnt : %s' % (len(inv_list) - inv_zero_cnt)
    print 'inv_valid = %s' % inv_vaild_list
#     
#     inv_count = 0
#     for inv in pure_mart_list:
#         print inv
#         #iterate every days and must be started w/ start of the day
#         sum_value = 0
#         tmp_time = datetime.datetime.now()
#         end = first
#         while is_past(end, last):
#             start = end
#             end = add_time(start, days=1)
#             modem_holiday = is_weekend(start)
#             query_result = tsdb_query(query, start, end, metric_in, inv, modem_holiday)
#             for group in query_result:
#                 if sum_value < 1: # value가 0일때만 실행 - dps['value']값이 0일때
#                     Find_ZeroValue(metric_in, group['dps'], group['tags'])
#                 else:             # value가 0이 아닐때 빠져나옴  - dps['value']값이 0이 아닐때
#                     break
#         if sum_value == 0:
#             mart_zero_cnt  += 1
#             mart_zero_list .append(inv)
#         if sum_value > 0:
#             mart_vaild_list.append(inv)
#         inv_count += 1
#         print 'elapsed time: {0!s}, {1!s}'.format(datetime.datetime.now() - tmp_time, datetime.datetime.now() - start_time)
#         print '<총 {0!r}/{1!r}개의 mart 데이터 처리>\n'.format(inv_count, len(pure_mart_list))
#     
#     inv_count = 0
#     for inv in pure_apt_list:
#         print inv
#         #iterate every days and must be started w/ start of the day
#         sum_value = 0
#         tmp_time = datetime.datetime.now()
#         end = first
#         while is_past(end, last):
#             start = end
#             end = add_time(start, days=1)
#             modem_holiday = is_weekend(start)
#             query_result = tsdb_query(query, start, end, metric_in, inv, modem_holiday)
#             for group in query_result:
#                 if sum_value < 1: # value가 0일때만 실행 - dps['value']값이 0일때
#                     Find_ZeroValue(metric_in, group['dps'], group['tags'])
#                 else:             # value가 0이 아닐때 빠져나옴  - dps['value']값이 0이 아닐때
#                     break
#         if sum_value == 0:
#             apt_zero_cnt += 1
#             apt_zero_list.append(inv)
#         if sum_value > 0:
#             apt_vaild_list.append(inv)
#         inv_count += 1    
#         print 'elapsed time: {0!s}, {1!s}'.format(datetime.datetime.now() - tmp_time, datetime.datetime.now() - start_time)
#         print '<총 {0!r}/{1!r}개의 apt 데이터 처리>\n'.format(inv_count, len(pure_apt_list))    
    
#     inv_count = 0
#     for inv in pure_etc_list:
#         print inv
#         #iterate every days and must be started w/ start of the day
#         sum_value = 0
#         tmp_time = datetime.datetime.now()
#         end = first
#         while is_past(end, last):
#             start = end
#             end = add_time(start, days=1)
#             modem_holiday = is_weekend(start)
#             query_result = tsdb_query(query, start, end, metric_in, inv, modem_holiday)
#             for group in query_result:
#                 if sum_value < 1: # value가 0일때만 실행 - dps['value']값이 0일때
#                     Find_ZeroValue(metric_in, group['dps'], group['tags'])
#                 else:             # value가 0이 아닐때 빠져나옴  - dps['value']값이 0이 아닐때
#                     break
#         if sum_value == 0:
#             etc_zero_cnt += 1
#             etc_zero_list.append(inv)
#         if sum_value > 0:
#             etc_vaild_list.append(inv)
#         inv_count += 1
#         print 'elapsed time: {0!s}, {1!s}'.format(datetime.datetime.now() - tmp_time, datetime.datetime.now() - start_time)
#         print '<총 {0!r}/{1!r}개의 etc 데이터 처리>\n'.format(inv_count, len(pure_etc_list))
    
#     inv_count = 0
#     for inv in pure_fiber_list:
#         print inv
#         #iterate every days and must be started w/ start of the day
#         sum_value = 0
#         tmp_time = datetime.datetime.now()
#         end = first
#         while is_past(end, last):
#             start = end
#             end = add_time(start, days=1)
#             modem_holiday = is_weekend(start)
#             query_result = tsdb_query(query, start, end, metric_in, inv, modem_holiday)
#             for group in query_result:
#                 if sum_value < 1: # value가 0일때만 실행 - dps['value']값이 0일때
#                     Find_ZeroValue(metric_in, group['dps'], group['tags'])
#                 else:             # value가 0이 아닐때 빠져나옴  - dps['value']값이 0이 아닐때
#                     break
#         if sum_value == 0:
#             fiber_zero_cnt += 1
#             fiber_zero_list.append(inv)
#         if sum_value > 0:
#             fiber_vaild_list.append(inv)
#         inv_count += 1
#         print 'elapsed time: {0!s}, {1!s}'.format(datetime.datetime.now() - tmp_time, datetime.datetime.now() - start_time)
#         print '<총 {0!r}/{1!r}개의 fiber 데이터 처리>\n'.format(inv_count, len(pure_fiber_list))
#     
#     inv_count = 0
#     for inv in total_school_list_list:
#         print inv
#         #iterate every days and must be started w/ start of the day
#         sum_value = 0
#         tmp_time = datetime.datetime.now()
#         end = first
#         while is_past(end, last):
#             start = end
#             end = add_time(start, days=1)
#             modem_holiday = is_weekend(start)
#             query_result = tsdb_query(query, start, end, metric_in, inv, modem_holiday)
#             for group in query_result:
#                 if sum_value < 1: # value가 0일때만 실행 - dps['value']값이 0일때
#                     Find_ZeroValue(metric_in, group['dps'], group['tags'])
#                 else:             # value가 0이 아닐때 빠져나옴  - dps['value']값이 0이 아닐때
#                     break
#         if sum_value == 0:
#             school_zero_cnt += 1
#             school_zero_list.append(inv)
#         if sum_value > 0:
#             school_vaild_list.append(inv)
#         inv_count += 1
#         print 'elapsed time: {0!s}, {1!s}'.format(datetime.datetime.now() - tmp_time, datetime.datetime.now() - start_time)
#         print '<총 {0!r}/{1!r}개의 school 데이터 처리>\n'.format(inv_count, len(total_school_list_list))
#     
#     inv_count = 0
#     for inv in total_food_list:
#         print inv
#         #iterate every days and must be started w/ start of the day
#         sum_value = 0
#         tmp_time = datetime.datetime.now()
#         end = first
#         while is_past(end, last):
#             start = end
#             end = add_time(start, days=1)
#             modem_holiday = is_weekend(start)
#             query_result = tsdb_query(query, start, end, metric_in, inv, modem_holiday)
#             for group in query_result:
#                 if sum_value < 1: # value가 0일때만 실행 - dps['value']값이 0일때
#                     Find_ZeroValue(metric_in, group['dps'], group['tags'])
#                 else:             # value가 0이 아닐때 빠져나옴  - dps['value']값이 0이 아닐때
#                     break
#         if sum_value == 0:
#             food_zero_cnt += 1
#             food_zero_list.append(inv)
#         if sum_value > 0:
#             food_vaild_list.append(inv)
#         inv_count += 1
#         print 'elapsed time: {0!s}, {1!s}'.format(datetime.datetime.now() - tmp_time, datetime.datetime.now() - start_time)
#         print '<총 {0!r}/{1!r}개의 food 데이터 처리>\n'.format(inv_count, len(total_food_list))
#     
#     inv_count = 0
#     for inv in total_sanyong_list:
#         print inv
#         #iterate every days and must be started w/ start of the day
#         sum_value = 0
#         tmp_time = datetime.datetime.now()
#         end = first
#         while is_past(end, last):
#             start = end
#             end = add_time(start, days=1)
#             modem_holiday = is_weekend(start)
#             query_result = tsdb_query(query, start, end, metric_in, inv, modem_holiday)
#             for group in query_result:
#                 if sum_value < 1: # value가 0일때만 실행 - dps['value']값이 0일때
#                     Find_ZeroValue(metric_in, group['dps'], group['tags'])
#                 else:             # value가 0이 아닐때 빠져나옴  - dps['value']값이 0이 아닐때
#                     break
#         if sum_value == 0:
#             sanyong_zero_cnt += 1
#             sanyong_zero_list.append(inv)
#         if sum_value > 0:
#             sanyong_vaild_list.append(inv)
#         inv_count += 1
#         print 'elapsed time: {0!s}, {1!s}'.format(datetime.datetime.now() - tmp_time, datetime.datetime.now() - start_time)
#         print '<총 {0!r}/{1!r}개의 sanyong 데이터 처리>\n'.format(inv_count, len(total_sanyong_list))
    
#     print 'factory zero_cnt : %s' % led_zero_cnt
#     print 'factory_zero = %s' % led_zero_list
#     print 'factory valid_cnt : %s' % (len(led_list) - led_zero_cnt)
#     print 'factory_valid = %s' % led_vaild_list
    
#     print 'office zero_cnt : %s' % inv_zero_cnt
#     print 'office_zero = %s' % inv_zero_list
#     print 'office valid_cnt : %s' % (len(inv_list) - inv_zero_cnt)
#     print 'office_valid = %s' % inv_vaild_list
#     
#     print 'mart zero_cnt : %s' % mart_zero_cnt
#     print 'mart_zero = %s' % mart_zero_list
#     print 'mart valid_cnt : %s' % (len(pure_mart_list) - mart_zero_cnt)
#     print 'mart_valid = %s' % mart_vaild_list
#     
#     print 'apt zero_cnt : %s' % apt_zero_cnt
#     print 'apt_zero = %s' % apt_zero_list
#     print 'apt valid_cnt : %s' % (len(pure_apt_list) - apt_zero_cnt)
#     print 'apt_valid = %s' % apt_vaild_list
    
#     print 'etc zero_cnt : %s' % etc_zero_cnt
#     print 'etc_zero = %s' % etc_zero_list
#     print 'etc valid_cnt : %s' % (len(pure_etc_list) - etc_zero_cnt)
#     print 'etc_valid = %s' % etc_vaild_list
    
    
#     print 'fiber zero_cnt : %s' % fiber_zero_cnt
#     print 'fiber_zero = %s' % fiber_zero_list
#     print 'fiber valid_cnt : %s' % (len(fiber_vaild_list) - fiber_zero_cnt)
#     print 'fiber_valid = %s' % fiber_vaild_list
#     
#     print 'school zero_cnt : %s' % school_zero_cnt
#     print 'school_zero = %s' % school_zero_list
#     print 'school valid_cnt : %s' % (len(school_vaild_list) - school_zero_cnt)
#     print 'school_valid = %s' % school_vaild_list
#     
#     print 'food zero_cnt : %s' % food_zero_cnt
#     print 'food_zero = %s' % food_zero_list
#     print 'food valid_cnt : %s' % (len(food_vaild_list) - food_zero_cnt)
#     print 'food_valid = %s' % food_vaild_list
#     
#     print 'sangyong zero_cnt : %s' % sanyong_zero_cnt
#     print 'sangyong_zero = %s' % sanyong_zero_list
#     print 'sangyong valid_cnt : %s' % (len(sanyong_vaild_list) - sanyong_zero_cnt)
#     print 'sangyong_valid = %s' % sanyong_vaild_list
    #Write_ZeroValue(led_zero_cnt, inv_zero_cnt, len(led_list), len(inv_list), led_vaild_list, inv_vaild_list, led_zero_list, inv_zero_list) # outlier log 기록함수
    #print 'zero_lists 작성완료!'
    print 'total elapsed time: {0!s}'.format(datetime.datetime.now() - start_time)

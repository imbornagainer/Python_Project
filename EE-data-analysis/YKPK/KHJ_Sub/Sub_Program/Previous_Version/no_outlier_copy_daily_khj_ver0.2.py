# -*- coding: utf-8 -*-
# Author : hwijinkim , https://github.com/imbornagainer

# openTSDB의 저장된 metrics를 get한 data와 개인의 data의 교집한 data값만 복사하기 위한 class

# 추가된 기능
# outlier 발생시 제외한 값만 put, value, time, modem_num등 info를 log기록  
# last modified by 20171027

import time
import datetime
import os
import sys
import requests
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry
import json
import argparse
import calendar
import urllib2
import socket
import copy
#from _input_list_17_0906 import modem_list, led_modem_list, inverter_modem_list

# OpenTSDB 클래스
# EE db 는 15분 단위의 데이터를 저장하고 있음
# OpenTSDB read, and write
class u_ee_tsdb :

    __cin_stime = None #시작시간
    __cin_etime = None #종료시간
    __cin_url = None
    __cin_recent = None
    __cin_datelist = []
    __cin_metric_name = None

    # 시간은 string type 예) 20160701
    def __init__(self, __url, __st = None, __et = None, __r = None) :
       self._url(__url)
       if __st != None and __et != None and __r != None : exit (" < Input Error > no time info")
       elif __st != None and __et != None : self._set_time_period(__st, __et)
       elif __st != None : self._set_time_period(__st)
       elif __r != None : self.__cin_recent = True
       elif self.__cin_recent != True : self.__cin_datelist = self.makeDateList()

    def _url(self, __url):
        self.__cin_url = __url
        if __url == None :
            # default for test
            self.__cin_url = None

    def _set_time_period(self, __st, __et = None) : 
    # TSDB는 기본적으로 시작/종료 시간필요
    # 최소한 시작 시간 필

        if __et == None :
            _lst = len(__st)
            if _lst < 8 : exit ("... too short data length")
            if _lst < 10 : __st = __st[:8] + '00'
            # 여기까지 진행한 날짜는 2017072912 이런식이라고 가정함.
            self.__cin_stime = __st
            self.__cin_etime = __et
            return

        _lst = len(__st)
        _let = len(__et)

        if _lst < 8 or _let < 8 : exit ("... too short data length")
        if _lst < 10 : __st = __st[:8] + '00'
        if _let < 10 : __et = __et[:8] + '00'
        if __st[:8] > __et[:8] : exit ("... Check start, end date")

        self.__cin_stime = __st
        self.__cin_etime = __et

    def set_metric(self,__m) : #TSDB는 metric 이름을 기준으로 읽고/저장
        self.__cin_metric_name = __m

    def changeTimeForOnePointReading(self, _start):
        _st = self.__cin_stime
        assert(self.__cin_etime == None)
        #print ("change self.__cin_etime = self.__cin_stime+ 1 hour")
        # 날짜는 2017072912 이런식이라고 가정함.
        # datetime.date object
        _tmp_obj = datetime.datetime.strptime(_st[:-2],"%Y%m%d").date()
        _tt = _st[-2:] + '00' + '00'
        _time_obj = datetime.datetime.strptime(_tt, "%H%M%S").time()
        _tmp_obj = datetime.datetime.combine(_tmp_obj, _time_obj)
        _delta_obj = datetime.timedelta(hours = 1)
        # datetime.datetime object
        _tmp_obj = _tmp_obj + _delta_obj
        _tmp = _tmp_obj.strftime('%Y%m%d%H')
        self.__cin_etime = _tmp 
        print _tmp
        assert(self.__cin_stime < self.__cin_etime )
        return _tmp   

    '''
    ## 함수 : calDate
    특정 시간 사이에 날짜들을 연월일시간(YYMMDDhh)을 반환
    open TSDB는 이런형식으로 날짜입력이 된다
    parameter1 (sttime) : 시작 시각
    parameter2 (ettime) : 종료 시각
    반환 (re_datelist) : 날짜 리스트
    '''
    
    def makeDateList(self):
        w_sttime = self.__cin_stime #start unixtime
        w_ettime = self.__cin_etime #end unixtime
        #make it to 23 hour for the last day, 2016110223
        #if w_ettime[-2:] != '23' : w_ettime = w_ettime[:-2] + '23'

        tmp_w_sttime = w_sttime[0:8]
        first_loop = 0
        re_datelist = []

        print self.__cin_url, self.__cin_stime, self.__cin_etime

        while 1:
            #time.sleep(0.01)
            #print ("   ... Processing Date List ... ")

            if first_loop > 0: # 첫 루프가 아니면, 마지막 루프 (종료 또는 다음날로 진행)
                if w_ettime > self.__cin_etime:
                    # 마지막 이면 : 최초 입력 날짜/시간 보다 종료 시간이 늦으면 종료
                    break
                else:
                    w_sttime = self.nextDate(w_sttime, 'd') # 다음날짜 받아옴
                    tmp_w_sttime = w_sttime[0:8]  # ymd 형식

            w_ettime = tmp_w_sttime + '23' #마지막 23시 표시

            if w_ettime == self.__cin_etime: # 마지막 시간 부분 :
                first_loop = 1 # 다음부터는 첫 루프로 진행
                re_datelist.append([w_sttime, w_ettime])
                break

            else:  # start time != end time, 아직 앞부분
                # 동일한 year 처리
                if dateInt(self.__cin_etime, 'y') == dateInt(w_sttime, 'y'):
                    if dateInt(self.__cin_etime, 'm') > dateInt(w_sttime, 'm'):  
                        # different month
                        # check the last day of start month
                        w_st_calr=calendar.monthrange(int(w_sttime[0:4]),dateInt(w_sttime,'m'))
                        if dateInt(w_sttime, 'd') == w_st_calr[1]:  
                            # current day == the last day of stday
                            # next month
                            re_datelist.append([w_sttime, tmp_w_sttime + '23'])
                            w_sttime = self.nextDate(w_sttime, 'm')
                            first_loop = 1
                            continue
                else: # 시작과 종료가 다른 year
                    tmp_w_sttime = w_sttime[0:4]  # year
                    w_st_calr = calendar.monthrange(int(w_sttime[0:4]), dateInt(w_sttime, 'm'))
                    if dateInt(w_sttime, 'd') == w_st_calr[1]:  
                        # current day == the last day of stday
                        re_datelist.append([w_sttime, w_ettime])
                        if dateInt(w_sttime, 'm') == 12:  # 12 month
                            # next year
                            w_sttime = self.nextDate(w_sttime, 'y')
                            tmp_w_sttime = w_sttime[0:8]
                            first_loop = 1
                            continue
                        else:
                            # next month
                            w_sttime = self.nextDate(w_sttime, 'm')
                            tmp_w_sttime = w_sttime[0:8]
                            first_loop = 1
                            continue
                first_loop = 1
            re_datelist.append([w_sttime, w_ettime])
            # [['2016110100', '2016110123'], ['2016110200', '2016110223'],
        return re_datelist

    '''
    ## 함수 : nextDate
    다음 "연, 월, 일"을 계산, 2016년 12월 30일 이후 31일인지, 아니면 1월1일 인지
    parameter1 (in_time) : 문자형 date 값
    parameter2 (in_mdh) : 연, 월, 일, 시간의 분류 (y, m, d, h)
    반환 (re_mdh) : 계산 된 다음 날
    '''
    def nextDate(self, in_time, in_mdh):
        # next year
        if in_mdh == 'y':
            int_year = dateInt(in_time, 'y')
            next_year = int_year + 1
            re_mdh = str(next_year) + '010000'  # next year/01/01/00

        # next month
        if in_mdh == 'm':
            int_month = dateInt(in_time, 'm')
            next_month = twodigitZero(int_month + 1)
            re_mdh = in_time[0:4] + next_month + '00' + in_time[8:10]  # next month/01/01

        # next day
        elif in_mdh == 'd':
            int_day = dateInt(in_time, 'd')
            next_day = twodigitZero(int_day + 1)
            re_mdh = in_time[0:6] + next_day + in_time[8:10]

        return re_mdh

    def readTSDrecent(self,  _tag = None, _agg = None, _start = '10m-ago', _end = "10m-later") :
        #if self.__cin_recent != 'True' : exit (" <Error> check call for *recent* ")
        _u = self.__cin_url
        _m = self.__cin_metric_name
        if _agg == None : _agg = 'none'

        url = '%sstart=%s' % (_u, _start)
        url += '&end=%s' % (_end)
        url += '&m=%s:%s' % (_agg, _m)
                
        #_tag_dict = ast.literal_eval(_tag)
        assert isinstance(_tag, dict)

        if len(_tag):

            url += '{'
            for (k, v) in _tag.items():
                url += '%s=%s,' % (k, v)
            url = url[:-1] + '}'

            try : ret = requests.get(url=url)
            except:
                print " <Error>... get restful"
        #print "\n Receive OK from server.... " + str(ret) + "\n"
        #print "url : %s" % url
        if ret.ok:
            data = json.loads(ret.text)
            assert isinstance(data, (list, tuple))
            return data
            
            dps = data[0]['dps']
            assert isinstance(dps, dict)  # 't' --> value
            if len(dps):
                max_time = sorted(dps.keys())[-1]
                value = dps[max_time]
                epoch = float(max_time)
                ts = datetime.datetime.fromtimestamp(epoch).strftime('%Y-%m-%d %H:%M:%S')
                return (value, ts, epoch)
########## end of class u_tsdb

'''
## 함수 : dateInt
문자열 date를 정수형으로 변환
parameter1 (in_time) : 문자형 date 값
parameter2 (mdh) : 연, 월, 일, 시간의 분류 (y, m, d, h)
반환 (re_mdh) : 변환 된 정수
'''
def dateInt(in_time, mdh):
    # year
    if mdh == 'y': re_mdh = int(in_time[0:4])
    # month
    if mdh == 'm':
        if in_time[4] == '0': re_mdh = int(in_time[5])
        else: re_mdh = int(in_time[4:6])
    # day
    elif mdh == 'd':
        if in_time[6] == '0': re_mdh = int(in_time[7])
        else: re_mdh = int(in_time[6:8])
    # hour
    elif mdh == 'h':
        if in_time[8] == '0': re_mdh = int(in_time[9])
        else: re_mdh = int(in_time[8:10])
    return re_mdh

'''
## 함수 : twodigitZero
한자리 정수 에 0을 추가
'''
def twodigitZero(in_num):
    if in_num < 10: re_num = '0' + str(in_num)
    else:
        re_num = str(in_num)
    return re_num

def parse_args():
    story = 'OpenTSDB needs many arguments URL, start time, end time, port '
    usg = '\n python tsdb_read.py  -url x.x.x.x -port 4242 -start 20161101 -end 20161102, --help for more info'
    parser = argparse.ArgumentParser(description=story, usage=usg, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("-url", default="125.140.110.217", help="URL input, or run fails")
    parser.add_argument("-start", default='2016/11/01-00:00:00', help="start time input, like 2016/07/01-00:00:00")
    parser.add_argument("-end", default='2016/11/02-00:00:00', help="end time input, like 2016/07/02-00:00:00")
    parser.add_argument("-port", default=4242, help="port input, like 4242")
    parser.add_argument("-recent", default="True", help="Time input for recent value")
    parser.add_argument("-m", default="none:rc04_simple_data_v3", help="metric name")
    args = parser.parse_args()
    
    #check args if valid
    url = args.url
    _ht = 'http://'
    if ( url[:7] != _ht ) : url = _ht + url
    port = args.port
    if  port == 80 : port = ''
    else : port = ":"+ str(port)
    url = url + port +'/api/query?'    

    start = args.start
    if start != None : start = args.start
    end = args.end
    if end != None : end = args.end

    recent = args.port
    if recent != None : recent = args.recent

    m = args.m
    if m == None : exit("... please input metric name")
    
    return url, port, start, end, recent, m

def rtest(__url, __m, __tag, __stime, __etime):
    tsdbclass = u_ee_tsdb(__url, None, None, True)
    tsdbclass.set_metric(__m)
    tag = __tag
    #tag = ""    # tag가 없는 관계로 빈값을 입력
    stime = __stime
    etime = __etime
    if (tag == None) : return
    
    # print tsdbclass.readTSDrecent(tag, 'sum', __stime)
    list_data = tsdbclass.readTSDrecent(tag, 'none', stime, etime)
    return list_data

def tsdb_query(query, start, end, metric, modem_num):
    param = {}
    if start: param['start'] = start
    if end: param['end'] = end
    param['m'] = metric + '{' + 'modem_num={0!s}'.format(modem_num) + '}'
    #print param
    if 1:
        response = requests.get(query, params=param)
        if response.ok:
            #print response.text
            return response.json()
        else:
            print 'request fails'
            return []
    else:
        try:
            response = requests_retry_session().get(query, params=param, timeout=5)
        except Exception as x:
            print 'requests timeout'
        else:
            if response.ok:
                #print response.text
                return response.json()
        return []

def printProgress (iteration, total, prefix = '', suffix = '', decimals = 1, barLength = 100):
    formatStr = "{0:." + str(decimals) + "f}"
    percent = formatStr.format(100 * (iteration / float(total)))
    filledLength = int(round(barLength * iteration / float(total)))
    bar = '#' * filledLength + '-' * (barLength - filledLength)
    sys.stdout.write('\r%s |%s| %s%s %s' % (prefix, bar, percent, '%', suffix)),
    if iteration == total:
        sys.stdout.write('\n')
    sys.stdout.flush()

def pack_dps(metric, dps, tags):
    pack = []
    tag = {'metric': metric, 'tags': tags}
    
    for dp in dps:
        print 'dp : %s' % dp
        sdp = copy.copy(tag)
        sdp['timestamp'] = int(dp.encode('utf8'))
        sdp['value'] = dps[dp]
        #print sdp
        pack.append(sdp)
    return pack

def requests_retry_session(
    retries=3,
    backoff_factor=0.3,
    status_forcelist=(500, 502, 504),
    session=None,
):
    session = session or requests.Session()
    retry = Retry(
        total=retries,
        read=retries,
        connect=retries,
        backoff_factor=backoff_factor,
        status_forcelist=status_forcelist,
    )
    adapter = HTTPAdapter(max_retries=retry)
    session.mount('http://', adapter)
    session.mount('https://', adapter)
    return session
    
def Chk_Outlier(chk_num, adj_modem_num,mds_id,unix_time, value):
    if chk_num == 1:
        chk_num += 1
        f = open('outlier_lists_171102_test_26.txt', 'w')
        f.write('%d:\n' % chk_num)
        f.write('modem_num : %s\n' % adj_modem_num)
        f.write('_mds_id   : %s\n' % mds_id)
        f.write('unix_time : %s\n' % ts2datetime(unix_time))
        f.write('value     : %s\n' % value)
        f.write('\n')
        f.close()
    else:
        f = open('outlier_lists_171102_test_26.txt', 'a')
        f.write('%d:\n' % chk_num)
        f.write('modem_num : %s\n' % adj_modem_num)
        f.write('_mds_id   : %s\n' % mds_id)
        f.write('unix_time : %s\n' % ts2datetime(unix_time))
        f.write('value     : %s\n' % value)
        f.write('\n')
        f.close()

def Post_Put_JsonData(put_url, input_data):
    try:
        input_data=json.dumps(input_data)
        ret = requests.post(put_url, input_data)
    except urllib2.HTTPError as e:
        error_msg = e.read()
        print ( "exception during requests HTTP", error_msg)
        response = requests_retry_session().post(put_url, data=input_data, timeout=5)
        return

def Telnet_Put_JsonData(new_metric, unix_time, value, holiday, mds_id, adj_modem_num, led_inverter):

    HOST = '125.140.110.217'
    PORT = 4242
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    _buf = "put %s %s %s holiday=%s _mds_id=%s modem_num=%s led_inverter=%s\n" % (new_metric, unix_time, value, holiday, mds_id, adj_modem_num, led_inverter)
#     sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     sock.connect((HOST, PORT))
    while 1:
        try:
            sock.connect((HOST, PORT))
        except:
            print 'socket error: ' + HOST            
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            time.sleep(5)
            print 'time sleep 5second'
            continue
        else:
            break
    
    if len(_buf) > 0:
        sock.sendall(_buf)
        #print '... writing', ret, _buf
        send = ''
    sock.close()
    return

def ts2datetime(ts_str):
    return datetime.datetime.fromtimestamp(int(ts_str)).strftime('%Y/%m/%d-%H:%M:%S')

def datetime2ts(dt_str):
    dt = datetime.datetime.strptime(dt_str, "%Y/%m/%d-%H:%M:%S")
    return time.mktime(dt.timetuple())

def str2datetime(dt_str):
    return datetime.datetime.strptime(dt_str, "%Y/%m/%d-%H:%M:%S")

def datetime2str(dt):
    return dt.strftime('%Y/%m/%d-%H:%M:%S')

def add_time(dt_str, days=0, hours=0):
    return datetime2str(str2datetime(dt_str) + datetime.timedelta(days=days, hours=hours))

def is_past(dt_str1, dt_str2):
    return datetime2ts(dt_str1) < datetime2ts(dt_str2)

def is_weekend(dt_str):
    if str2datetime(dt_str).weekday() >= 5: return '1'
    else: return '0'

if __name__ == "__main__":
    url, port, stime, etime, recent, metric = parse_args()
    
    query = 'http://125.140.110.217:4242/api/query'.format(port)
    put_url = "http://125.140.110.217:4242/api/put"  # api/put에 값을 주지 않는다면 db는 받질 않는다.
    new_metric = 'rc05_no_outlier_copy_test_tag_v26' # 새로 put할 metric 설정하는 변수 (원하는 metric명을 입력하면 된다.)
    progress_num = 0
    chk_num = 1
    
    modem_list= [['01222799986'], ['01220800574'], ['01224230529'], ['01222714543'], ['01224230467'], ['01223239869'], ['01224230576'], ['01222679989'], ['01222746396'], ['01222746350'], ['01224230549'], ['01224224135'], ['01224273071'], ['01224272966'], ['01223192391'], ['01221343888'], ['01224230577'], ['01222729929'], ['0123209874'], ['01224230493'], ['01224230501'], ['01224272949'], ['01224230526'], ['01221386983'], ['01223239875'], ['01223239870'], ['01221451993'], ['01221251996'], ['01224230542'], ['01224230434'], ['01224230480'], ['01224230484'], ['01224230485'], ['01224230470'], ['01222746456'], ['01222742834'], ['01223219133'], ['01223219131'], ['01223219130'], ['01223219129'], ['01223192247'], ['01222745462'], ['01221574357'], ['01222699986'], ['01222742200'], ['01222649984'], ['01222754504'], ['01222739929'], ['01224230571'], ['01222674503'], ['01224230527'], ['01224230531'], ['01224230569'], ['01222669986'], ['01223187397'], ['01223209886'], ['01222764501'], ['01222742912'], ['01224272962'], ['01222745935'], ['01222745933'], ['01222745947'], ['01222742969'], ['01222742878'], ['01222746463'], ['01223239874'], ['01223239873'], ['01222704503'], ['01223187431'], ['01223187430'], ['01224272938'], ['01222745939'], ['01222674501'], ['01220684147'], ['01222694501'], ['01222734501'], ['01223187419'], ['01223188270'], ['01223189537'], ['01222769929'], ['01221574356'], ['01224230509'], ['01224230472'], ['01224230478'], ['01222746390'], ['01222745510'], ['01222719929'], ['01221574359'], ['01222746366'], ['01222779929'], ['01223239865'], ['01223219128'], ['01224230518'], ['01223187436'], ['01223188269'], ['01222754503'], ['01222742885'], ['01222745938'], ['01222724503'], ['01222704504'], ['01222742752'], ['01222694503'], ['01224230546'], ['01221341991'], ['01224224149'], ['01220800623'], ['01220435025'], ['01224230511'], ['01224230515'], ['01224230461'], ['01224230533'], ['01224230451'], ['01223209883'], ['01223209884'], ['01223219126'], ['01223209881'], ['01223192283'], ['01222654504'], ['01222755541'], ['01222766541'], ['01222709541'], ['01222744754'], ['01222719541'], ['01222739541'], ['01222587543'], ['01222666541'], ['01221291991'], ['01223192386'], ['01222714503'], ['01224230446'], ['01224230532'], ['01222667543'], ['01222764503'], ['01222586543'], ['01222684504'], ['01222699987'], ['01222742956'], ['01222684501'], ['01222699984'], ['01224230479'], ['01221731209'], ['01224230558'], ['01224230495'], ['01222739987'], ['01222739986'], ['01221388812'], ['01221388441'], ['01221721213'], ['01221961213'], ['01223187386'], ['01223192395'], ['01224273086'], ['01222567452'], ['01222587452'], ['01221566970'], ['01223209872'], ['01222714504'], ['01222664504'], ['01222676543'], ['01222742757'], ['01222647452'], ['01222744504'], ['01222749989'], ['01222746383'], ['01222776543'], ['01222745635'], ['01222597452'], ['01222745363'], ['01222779984'], ['01224230436'], ['01222758870'], ['01221474412'], ['01221474414'], ['01222779987'], ['01224273013'], ['01222745527'], ['01222745458'], ['01222664501'], ['01222779986'], ['01224230496'], ['01221566963'], ['01221574336'], ['01224230433'], ['01222767541'], ['01222742927'], ['01222742916'], ['01222689984'], ['01222687452'], ['01222742760'], ['01224230525'], ['01222797541'], ['01224230439'], ['01224272937'], ['01224272982'], ['01224230449'], ['01220800592'], ['01224230457'], ['01224230506'], ['01222746381'], ['01224230477'], ['01224273037'], ['01223192327'], ['01223192308'], ['01223192263'], ['01223192287'], ['01223192392'], ['01224230491'], ['01221421994'], ['01221441994'], ['01222749929'], ['01224230551'], ['01224273073'], ['01222659986'], ['01224230473'], ['01223219050'], ['01224230530'], ['01223239872'], ['01224230488'], ['01223219068'], ['01223219066'], ['01224273039'], ['01224273091'], ['01224230570'], ['01224272955'], ['01224230483'], ['01224230513'], ['01224230482'], ['01223239867'], ['01224230507'], ['01224230517'], ['01224273038'], ['01224230490'], ['01222704501'], ['01222798870'], ['01223239866'], ['01222754501'], ['01222709929'], ['01222748870'], ['01224230528'], ['01222683542'], ['01222664503'], ['01222654503'], ['01222674504'], ['01222746482'], ['012227694504'], ['01222719989'], ['01221448178'], ['01222744503'], ['01223192284'], ['01223187417'], ['01223187414'], ['01222759929'], ['01221311993'], ['01221243882'], ['01221361991'], ['01223192328'], ['01221371991'], ['01221474413'], ['01221273883'], ['01222654501'], ['01222799985'], ['01221253884'], ['01220800593'], ['01222742949'], ['01222746459'], ['01222684503'], ['01224230460'], ['01224230565'], ['01224230465'], ['01221388068'], ['01221391442'], ['01221391244'], ['01221391199'], ['01221391155'], ['01224230476'], ['01221574346'], ['01221567020'], ['01222765541'], ['01222734504'], ['01221566961'], ['01221566960'], ['01223189591'], ['01221566971'], ['01223187435'], ['01221574354'], ['01223188887'], ['01221574324'], ['01221567011'], ['01222742946'], ['01222636543'], ['01222659984'], ['01222745943'], ['01222563542'], ['01224230564'], ['01224230568'], ['01224230541'], ['01220800748'], ['01222744780'], ['01224230541'], ['01224230539'], ['01224230534'], ['01222745479'], ['01222729989'], ['01222577452'], ['01222746397'], ['01222779985'], ['01222769989'], ['01222729987'], ['01222688541'], ['01222618542'], ['01224230435'], ['01224230487'], ['01223209889'], ['01223209891'], ['01223209888'], ['01224230489'], ['01224230504'], ['01224230486'], ['01224230469'], ['01224230510'], ['01222746461'], ['01224230443'], ['01222796541'], ['01224230512'], ['01222742798'], ['01222746421'], ['01222753541'], ['01222744501'], ['01222749984'], ['01222749985'], ['01222742888'], ['01222742934'], ['01222788870'], ['01222746472'], ['01222597541'], ['01222769542'], ['01222616541'], ['01222742704'], ['01224230437'], ['01223209890'], ['01222724501'], ['01221283886'], ['01222564542'], ['01222742908'], ['01222745934'], ['01222745495'], ['01222745859'], ['01224230516'], ['01224230500'], ['01221390965'], ['01221387937'], ['01221474387'], ['01221351991'], ['01221431994'], ['01221261996'], ['01223239871'], ['01223239868'], ['01224230575'], ['01224230573'], ['01222769984'], ['01223187402'], ['01223187398'], ['01223187384'], ['01223187403'], ['01223187406'], ['01224272944'], ['01221429366'], ['01221429367'], ['01221429369'], ['01221471994'], ['01221474403'], ['01221474402'], ['01221474406'], ['01221474407'], ['01221341993'], ['01221371993'], ['01223192410'], ['01223192453'], ['01221243885'], ['01221243887'], ['01224230464'], ['01223192393'], ['01223192394'], ['01223187395'], ['01224230458'], ['01224230459'], ['01222746380'], ['01222794503'], ['01222759989'], ['01220800701'], ['01222734543'], ['01222747452'], ['01223187394'], ['01223187387'], ['01221463494'], ['01221429368'], ['01221390254'], ['01221388836'], ['01221474404'], ['01221474405'], ['01222789986'], ['01223192096'], ['01223187332'], ['01224230502'], ['01223299440'], ['01224273014'], ['01224272948'], ['01223299436'], ['01223219048'], ['01221392626'], ['01221392897'], ['01223299434'], ['01223219093'], ['01223219092'], ['01224272943'], ['01224273042'], ['01223209869'], ['01223299433'], ['01223192279'], ['01223219047'], ['01223299429'], ['01223187276'], ['01223299435'], ['01223299431'], ['01223209868'], ['01223181056'], ['01223181052'], ['01223299443'], ['01223299446'], ['01223299445'], ['01224230567'], ['01224273017'], ['01223187286'], ['01223180993'], ['01223299439'], ['01220553054'], ['01224273061'], ['01224273022'], ['01223209866'], ['01221392027'], ['01221389654'], ['01223187357'], ['01221390900'], ['01221387086'], ['01221387826'], ['01223187380'], ['01221399481'], ['01221393131'], ['01221393546'], ['01224273046'], ['01224273052'], ['01223239879'], ['01223239880'], ['01223239878'], ['01223239876'], ['01223239888'], ['01223239886'], ['01223192368'], ['01223219070'], ['01223192373'], ['01224230548'], ['01223219115'], ['01223219114'], ['01223219090'], ['01223187314'], ['01224273085'], ['01224273018'], ['01224273092'], ['01224273096'], ['01224273087'], ['01223180968'], ['01223180966'], ['01223180976'], ['01223181061'], ['01224230447'], ['01224230455'], ['01224230466'], ['01224230441'], ['01224230521'], ['01224272948'], ['01224273045'], ['01223299438'], ['01224272958'], ['01223180994'], ['01224230559'], ['01223219089'], ['01224273026'], ['01224273079'], ['01224272971'], ['01223209865'], ['01223209864'], ['01223209863'], ['01220800675'], ['01224272988'], ['01223299442'], ['01223299430'], ['01220674075'], ['01220674130'], ['01220674064'], ['01222615541'], ['01220674076'], ['01220674061'], ['01220800602'], ['01221273880'], ['01220800591'], ['01220674093'], ['01220674088'], ['01222689542'], ['01220800573'], ['01221474395'], ['01222674541'], ['01221446681'], ['01220800684'], ['01222751542'], ['01222603542'], ['01220674121'], ['01220674078'], ['01220674112'], ['01222664541'], ['01222691541'], ['01222753542'], ['01220435022'], ['01220674094'], ['01222774542'], ['01221474396'], ['01221474399'], ['01221474401'], ['01220674085'], ['01221474389'], ['01221429372'], ['01220674157'], ['01221474397'], ['01221429374'], ['01221429371'], ['01221446671'], ['01222594541'], ['01221401991'], ['01220800716'], ['01220674084'], ['01222687542'], ['01221331991'], ['01220800763'], ['01221411991'], ['01221431991'], ['01221461994'], ['01220674095'], ['01220800669'], ['01220435093'], ['01221441991'], ['01221241996'], ['01221391991'], ['01221381991'], ['01221301996']]
    led_modem_list= [['01222799986'], ['01220800574'], ['01224230529'], ['01222714543'], ['01224230467'], ['01223239869'], ['01224230576'], ['01222679989'], ['01222746396'], ['01222746350'], ['01224230549'], ['01224224135'], ['01224273071'], ['01224272966'], ['01223192391'], ['01221343888'], ['01224230577'], ['01222729929'], ['0123209874'], ['01224230493'], ['01224230501'], ['01224272949'], ['01224230526'], ['01221386983'], ['01223239875'], ['01223239870'], ['01221451993'], ['01221251996'], ['01224230542'], ['01224230434'], ['01224230480'], ['01224230484'], ['01224230485'], ['01224230470'], ['01222746456'], ['01222742834'], ['01223219133'], ['01223219131'], ['01223219130'], ['01223219129'], ['01223192247'], ['01222745462'], ['01221574357'], ['01222699986'], ['01222742200'], ['01222649984'], ['01222754504'], ['01222739929'], ['01224230571'], ['01222674503'], ['01224230527'], ['01224230531'], ['01224230569'], ['01222669986'], ['01223187397'], ['01223209886'], ['01222764501'], ['01222742912'], ['01224272962'], ['01222745935'], ['01222745933'], ['01222745947'], ['01222742969'], ['01222742878'], ['01222746463'], ['01223239874'], ['01223239873'], ['01222704503'], ['01223187431'], ['01223187430'], ['01224272938'], ['01222745939'], ['01222674501'], ['01220684147'], ['01222694501'], ['01222734501'], ['01223187419'], ['01223188270'], ['01223189537'], ['01222769929'], ['01221574356'], ['01224230509'], ['01224230472'], ['01224230478'], ['01222746390'], ['01222745510'], ['01222719929'], ['01221574359'], ['01222746366'], ['01222779929'], ['01223239865'], ['01223219128'], ['01224230518'], ['01223187436'], ['01223188269'], ['01222754503'], ['01222742885'], ['01222745938'], ['01222724503'], ['01222704504'], ['01222742752'], ['01222694503'], ['01224230546'], ['01221341991'], ['01224224149'], ['01220800623'], ['01220435025'], ['01224230511'], ['01224230515'], ['01224230461'], ['01224230533'], ['01224230451'], ['01223209883'], ['01223209884'], ['01223219126'], ['01223209881'], ['01223192283'], ['01222654504'], ['01222755541'], ['01222766541'], ['01222709541'], ['01222744754'], ['01222719541'], ['01222739541'], ['01222587543'], ['01222666541'], ['01221291991'], ['01223192386'], ['01222714503'], ['01224230446'], ['01224230532'], ['01222667543'], ['01222764503'], ['01222586543'], ['01222684504'], ['01222699987'], ['01222742956'], ['01222684501'], ['01222699984'], ['01224230479'], ['01221731209'], ['01224230558'], ['01224230495'], ['01222739987'], ['01222739986'], ['01221388812'], ['01221388441'], ['01221721213'], ['01221961213'], ['01223187386'], ['01223192395'], ['01224273086'], ['01222567452'], ['01222587452'], ['01221566970'], ['01223209872'], ['01222714504'], ['01222664504'], ['01222676543'], ['01222742757'], ['01222647452'], ['01222744504'], ['01222749989'], ['01222746383'], ['01222776543'], ['01222745635'], ['01222597452'], ['01222745363'], ['01222779984'], ['01224230436'], ['01222758870'], ['01221474412'], ['01221474414'], ['01222779987'], ['01224273013'], ['01222745527'], ['01222745458'], ['01222664501'], ['01222779986'], ['01224230496'], ['01221566963'], ['01221574336'], ['01224230433'], ['01222767541'], ['01222742927'], ['01222742916'], ['01222689984'], ['01222687452'], ['01222742760'], ['01224230525'], ['01222797541'], ['01224230439'], ['01224272937'], ['01224272982'], ['01224230449'], ['01220800592'], ['01224230457'], ['01224230506'], ['01222746381'], ['01224230477'], ['01224273037'], ['01223192327'], ['01223192308'], ['01223192263'], ['01223192287'], ['01223192392'], ['01224230491'], ['01221421994'], ['01221441994'], ['01222749929'], ['01224230551'], ['01224273073'], ['01222659986'], ['01224230473'], ['01223219050'], ['01224230530'], ['01223239872'], ['01224230488'], ['01223219068'], ['01223219066'], ['01224273039'], ['01224273091'], ['01224230570'], ['01224272955'], ['01224230483'], ['01224230513'], ['01224230482'], ['01223239867'], ['01224230507'], ['01224230517'], ['01224273038'], ['01224230490'], ['01222704501'], ['01222798870'], ['01223239866'], ['01222754501'], ['01222709929'], ['01222748870'], ['01224230528'], ['01222683542'], ['01222664503'], ['01222654503'], ['01222674504'], ['01222746482'], ['012227694504'], ['01222719989'], ['01221448178'], ['01222744503'], ['01223192284'], ['01223187417'], ['01223187414'], ['01222759929'], ['01221311993'], ['01221243882'], ['01221361991'], ['01223192328'], ['01221371991'], ['01221474413'], ['01221273883'], ['01222654501'], ['01222799985'], ['01221253884'], ['01220800593'], ['01222742949'], ['01222746459'], ['01222684503'], ['01224230460'], ['01224230565'], ['01224230465'], ['01221388068'], ['01221391442'], ['01221391244'], ['01221391199'], ['01221391155'], ['01224230476'], ['01221574346'], ['01221567020'], ['01222765541'], ['01222734504'], ['01221566961'], ['01221566960'], ['01223189591'], ['01221566971'], ['01223187435'], ['01221574354'], ['01223188887'], ['01221574324'], ['01221567011'], ['01222742946'], ['01222636543'], ['01222659984'], ['01222745943'], ['01222563542'], ['01224230564'], ['01224230568'], ['01224230541'], ['01220800748'], ['01222744780'], ['01224230541'], ['01224230539'], ['01224230534'], ['01222745479'], ['01222729989'], ['01222577452'], ['01222746397'], ['01222779985'], ['01222769989'], ['01222729987'], ['01222688541'], ['01222618542'], ['01224230435'], ['01224230487'], ['01223209889'], ['01223209891'], ['01223209888'], ['01224230489'], ['01224230504'], ['01224230486'], ['01224230469'], ['01224230510'], ['01222746461'], ['01224230443'], ['01222796541'], ['01224230512'], ['01222742798'], ['01222746421'], ['01222753541'], ['01222744501'], ['01222749984'], ['01222749985'], ['01222742888'], ['01222742934'], ['01222788870'], ['01222746472'], ['01222597541'], ['01222769542'], ['01222616541'], ['01222742704'], ['01224230437'], ['01223209890'], ['01222724501'], ['01221283886'], ['01222564542'], ['01222742908'], ['01222745934'], ['01222745495'], ['01222745859'], ['01224230516'], ['01224230500'], ['01221390965'], ['01221387937'], ['01221474387'], ['01221351991'], ['01221431994'], ['01221261996'], ['01223239871'], ['01223239868'], ['01224230575'], ['01224230573'], ['01222769984'], ['01223187402'], ['01223187398'], ['01223187384'], ['01223187403'], ['01223187406'], ['01224272944'], ['01221429366'], ['01221429367'], ['01221429369'], ['01221471994'], ['01221474403'], ['01221474402'], ['01221474406'], ['01221474407'], ['01221341993'], ['01221371993'], ['01223192410'], ['01223192453'], ['01221243885'], ['01221243887'], ['01224230464'], ['01223192393'], ['01223192394'], ['01223187395'], ['01224230458'], ['01224230459'], ['01222746380'], ['01222794503'], ['01222759989'], ['01220800701'], ['01222734543'], ['01222747452'], ['01223187394'], ['01223187387'], ['01221463494'], ['01221429368'], ['01221390254'], ['01221388836'], ['01221474404'], ['01221474405'], ['01222789986']] 
    inverter_modem_list= [['01223192096'], ['01223187332'], ['01224230502'], ['01223299440'], ['01224273014'], ['01224272948'], ['01223299436'], ['01223219048'], ['01221392626'], ['01221392897'], ['01223299434'], ['01223219093'], ['01223219092'], ['01224272943'], ['01224273042'], ['01223209869'], ['01223299433'], ['01223192279'], ['01223219047'], ['01223299429'], ['01223187276'], ['01223299435'], ['01223299431'], ['01223209868'], ['01223181056'], ['01223181052'], ['01223299443'], ['01223299446'], ['01223299445'], ['01224230567'], ['01224273017'], ['01223187286'], ['01223180993'], ['01223299439'], ['01220553054'], ['01224273061'], ['01224273022'], ['01223209866'], ['01221392027'], ['01221389654'], ['01223187357'], ['01221390900'], ['01221387086'], ['01221387826'], ['01223187380'], ['01221399481'], ['01221393131'], ['01221393546'], ['01224273046'], ['01224273052'], ['01223239879'], ['01223239880'], ['01223239878'], ['01223239876'], ['01223239888'], ['01223239886'], ['01223192368'], ['01223219070'], ['01223192373'], ['01224230548'], ['01223219115'], ['01223219114'], ['01223219090'], ['01223187314'], ['01224273085'], ['01224273018'], ['01224273092'], ['01224273096'], ['01224273087'], ['01223180968'], ['01223180966'], ['01223180976'], ['01223181061'], ['01224230447'], ['01224230455'], ['01224230466'], ['01224230441'], ['01224230521'], ['01224272948'], ['01224273045'], ['01223299438'], ['01224272958'], ['01223180994'], ['01224230559'], ['01223219089'], ['01224273026'], ['01224273079'], ['01224272971'], ['01223209865'], ['01223209864'], ['01223209863'], ['01220800675'], ['01224272988'], ['01223299442'], ['01223299430']]
    valid_list= [['01223187332'], ['01224230502'], ['01224272943'], ['01223187357'], ['01224273096'], ['01220800675'], ['01224230548'], ['01224273046'], ['01223239888'], ['01223299446'], ['01224273022'], ['01223239886'], ['01220800701'], ['01223299434'], ['01223187276'], ['01223187286'], ['01223180976'], ['01224230521'], ['01223180994'], ['01224230529'], ['01224230467'], ['01223192391'], ['01221343888'], ['01224230577'], ['01224230493'], ['01224230501'], ['01224230526'], ['01221386983'], ['01223239875'], ['01223239870'], ['01221251996'], ['01224230542'], ['01224230434'], ['01224230484'], ['01224230485'], ['01224230470'], ['01222699986'], ['01222742200'], ['01222739929'], ['01224230527'], ['01223187397'], ['01222764501'], ['01223239874'], ['01223187431'], ['01223187430'], ['01222674501'], ['01220684147'], ['01222694501'], ['01224230509'], ['01224230472'], ['01224230478'], ['01222746390'], ['01222779929'], ['01224230518'], ['01222754503'], ['01224230546'], ['01224224149'], ['01220800623'], ['01220435025'], ['01224230511'], ['01224230515'], ['01224230461'], ['01224230533'], ['01224230451'], ['01223192386'], ['01224230446'], ['01224230532'], ['01222764503'], ['01222586543'], ['01222684504'], ['01222684501'], ['01224230479'], ['01223187386'], ['01222647452'], ['01222746383'], ['01224230436'], ['01222758870'], ['01221474412'], ['01221474414'], ['01222779987'], ['01222664501'], ['01221566963'], ['01221574336'], ['01224230433'], ['01224230525'], ['01224230439'], ['01224230449'], ['01220800592'], ['01224230457'], ['01222746381'], ['01223192263'], ['01224230491'], ['01221421994'], ['01221441994'], ['01222749929'], ['01224230551'], ['01224230473'], ['01223239872'], ['01224230488'], ['01224230513'], ['01224230482'], ['01224230507'], ['01224230517'], ['01224230490'], ['01222704501'], ['01222754501'], ['01222709929'], ['01224230528'], ['01222683542'], ['01221448178'], ['01223192284'], ['01222759929'], ['01221243882'], ['01221361991'], ['01221474413'], ['01222654501'], ['01222799985'], ['01221253884'], ['01220800593'], ['01224230460'], ['01224230565'], ['01224230465'], ['01224230476'], ['01221574346'], ['01221567020'], ['01221566961'], ['01221566960'], ['01221566971'], ['01223187435'], ['01221574354'], ['01223188887'], ['01221574324'], ['01222636543'], ['01222745943'], ['01224230564'], ['01224230541'], ['01224230539'], ['01224230534'], ['01222746397'], ['01224230435'], ['01224230487'], ['01224230489'], ['01224230504'], ['01224230486'], ['01224230469'], ['01224230510'], ['01224230443'], ['01222796541'], ['01224230512'], ['01222744501'], ['01224230437'], ['01222724501'], ['01221283886'], ['01222745934'], ['01222745495'], ['01224230516'], ['01224230500'], ['01221474387'], ['01221431994'], ['01221261996'], ['01223187402'], ['01223187398'], ['01223187384'], ['01221471994'], ['01221474403'], ['01221474402'], ['01221474406'], ['01221474407'], ['01221243887'], ['01224230464'], ['01223192393'], ['01223192394'], ['01224230458'], ['01224230459'], ['01223187394'], ['01221474404'], ['01221474405'], ['01222789986'], ['01220674130'], ['01220674064'], ['01220674076'], ['01220674061'], ['01220800602'], ['01220800591'], ['01220674093'], ['01220674088'], ['01220800573'], ['01221474395'], ['01220800684'], ['01220674121'], ['01220674078'], ['01220674112'], ['01220674094'], ['01221474399'], ['01220674085'], ['01221474389'], ['01220674157'], ['01221429374'], ['01221446671'], ['01221401991'], ['01220800716'], ['01220674084'], ['01220800763'], ['01221431991'], ['01220674095'], ['01220800669'], ['01220435093'], ['01221241996'], ['01221391991'], ['01221381991'], ['01223192096'], ['01223299440'], ['01223219093'], ['01224273017'], ['01223180993'], ['01223219115'], ['01223219114'], ['01224273087'], ['01224273045'], ['01224230559'], ['01223219089'], ['01224273026'], ['01224273079'], ['01224272971'], ['01222746396'], ['01222746350'], ['01224230549'], ['01224224135'], ['01224272966'], ['01222729929'], ['01222746456'], ['01222742834'], ['01223219130'], ['01223192247'], ['01222745462'], ['01221574357'], ['01222754504'], ['01222674503'], ['01224230531'], ['01224230569'], ['01222742878'], ['01222746463'], ['01222704503'], ['01222745939'], ['01222734501'], ['01222769929'], ['01221574356'], ['01222745510'], ['01222719929'], ['01221574359'], ['01222746366'], ['01223239865'], ['01223219128'], ['01222742885'], ['01222745938'], ['01222724503'], ['01222704504'], ['01222742752'], ['01222694503'], ['01223209883'], ['01223209884'], ['01223192283'], ['01222654504'], ['01222714503'], ['01222699984'], ['01221731209'], ['01224230558'], ['01224230495'], ['01221388812'], ['01221388441'], ['01224273086'], ['01221566970'], ['01223209872'], ['01222714504'], ['01222664504'], ['01222742757'], ['01222744504'], ['01224230496'], ['01222689984'], ['01224230506'], ['01224230477'], ['01224273073'], ['01223219050'], ['01224230530'], ['01224273039'], ['01224273091'], ['01224230570'], ['01224272955'], ['01224230483'], ['01223239867'], ['01222798870'], ['01222748870'], ['01222664503'], ['01222654503'], ['01222674504'], ['01222746482'], ['01222744503'], ['01221273883'], ['01222746459'], ['01222684503'], ['01221388068'], ['01221567011'], ['01222742946'], ['01222659984'], ['01222744780'], ['01222745479'], ['01223209889'], ['01223209891'], ['01222742798'], ['01222746421'], ['01223209890'], ['01222745859'], ['01221351991'], ['01223239871'], ['01223187403'], ['01223187406'], ['01223192453'], ['01222746380'], ['01222794503'], ['01223187387'], ['01221390254'], ['01223299436'], ['01223219047'], ['01223299431'], ['01222714543'], ['01223239869'], ['01224230576'], ['01223188269'], ['01222742956'], ['01222745635'], ['01222745363'], ['01222742927'], ['01222742916'], ['01224272937'], ['01222742949'], ['01221391199'], ['01221391155'], ['01222618542'], ['01222742704'], ['01222742908'], ['01223209868'], ['01223299443'], ['01223299439'], ['01223209866'], ['01224273085'], ['01223180968'], ['01223209864'], ['01223209863'], ['01224272988'], ['01223299442'], ['01224272962'], ['01223187419'], ['01223188270'], ['01222744754'], ['01222587543'], ['01221291991'], ['01222567452'], ['01222577452'], ['01222688541'], ['01222769542'], ['01221463494'], ['01221474401']]
    
    print '<총 {0!r}개의 데이터 추출>'.format(len(valid_list))
    print 'Start!'
    print 'Started time is : %s\n' % datetime.datetime.now()
    
    for modem_num in valid_list:
        adj_modem_num = str(modem_num)[2:-2]
        print "%d : %s" % (progress_num+1, adj_modem_num)
        tag = {'modem_num':adj_modem_num}
        
        #From start날짜 To last data하루씩 put
        end = stime
        while is_past(end, etime):
            start = end
            end = add_time(start, days=1)

            if recent == 'True':
                if tag == "":tag = ""           # 특정 tag가 없음(시간을 기준으로 get한 모든 값을 얻기 위함)
                #get_list_data = rtest(url, metric, tag, start, end)
                get_list_data = tsdb_query(query, start, end, metric, adj_modem_num)
                #print 'get_list_data : %s' % get_list_data
            else:
                print "Sorry... Not ready to get"
                exit()

            if get_list_data == None:continue   #if no data, go to the next iteration
            
            for i in range(len(get_list_data)):
                mds_id = get_list_data[i]['tags']['_mds_id']
                holiday = get_list_data[i]['tags']['holiday']
                led_inverter = get_list_data[i]['tags']['led_inverter']
                
                for (unix_time, value) in get_list_data[i]['dps'].items():
                    if (float(value) > 101.0):
                        print 'data : %s' % get_list_data[i]['dps'].items()
                        print 'unix_time : %s' % unix_time
                        print 'value : %s' % value
                        Chk_Outlier(chk_num, adj_modem_num, mds_id, unix_time, value)
#                     else:
#                         Telnet_Put_JsonData(new_metric, unix_time, value, holiday, mds_id, adj_modem_num, led_inverter)
# #                         input_data = {
# #                             "metric": new_metric,
# #                             "timestamp": unix_time,
# #                             "value": value,
# #                             "tags": {
# #                                 "holiday": holiday,
# #                                 "_mds_id": mds_id,
# #                                 "modem_num": adj_modem_num,
# #                                 "led_inverter": led_inverter,
# #                             }
# #                         }
#                         if 0:
#                             Post_Put_JsonData(put_url, input_data)
# 
#             #print "start: %s end: %s until: %s" % (start, end, etime)
#         progress_num += 1
#         print '<총 {0!r}/{1!r}개의 Data를 처리>'.format(progress_num, len(valid_list))
#         printProgress(progress_num, len(valid_list), 'Progress:', 'Complete', 1, 50) # show progress
#         print '\n'
#     print 'end!'
#     print 'Ending time is : %s\n' % datetime.datetime.now()
#!/usr/bin/python
# -*- coding: utf-8 -*-

import time
import datetime
import cx_Oracle
import os
import sys
import requests
import json
import argparse
from types import *

url = "http://125.140.110.217:4242/api/put"
response ={}

con = cx_Oracle.connect('keti_user/keti1357!#@125.141.144.149/aimir')
cur = con.cursor()

def timeTOunixtime (rlt):
        #YYYY [0:4], MM [4:6], DD [6:8], HH [8:10], m[10:12]
        stime = "%s/%s/%s" %(rlt[6:8], rlt[4:6], rlt[0:4])
        h = rlt[8:10]

	if len(rlt) == 10: # without minutes
		m = '00'
	else:
        	m = rlt[10:12]

        #unixtime need to have 1 sec unit scale
        dechour = int(h)*60*60
        dechour += int(m)*60
        unixday = time.mktime(datetime.datetime.strptime(stime, "%d/%m/%Y").timetuple())
        unixtime = unixday + dechour

        return int(unixtime)


# update 15 minutes one TSDB
def updateMINONE(in_sttime, in_entime, in_mdsid,tagdata):
        starttime = in_sttime
        endtime = in_entime
        mdsid = in_mdsid

        sql_tmp = "select ELE.LP_TIME, ELE.VALUE_00, ELE.VALUE_15, ELE.VALUE_30, ELE.VALUE_45, ECU.NAME, ECO.LOCATION, ECO.SIC, ELE.MDS_ID, ELE.DEVICE_SERIAL, ECU.CUSTOMERNO, ELE.CHANNEL from EMNV_LP_EM_VIEW  ELE join EMNV_CONTRACT_VIEW ECO on ELE.MDS_ID = ECO.MDS_ID join EMNV_CUSTOMER_VIEW ECU on ECO.CUSTOMERNO = ECU.CUSTOMERNO where (ELE.CHANNEL=1) and (ELE.LP_TIME between '%s' and '%s') and (ELE.MDS_ID='%s') order by ELE.MDS_ID ASC, ELE.LP_TIME ASC" %(starttime, endtime, mdsid)

	minlist = ['00', '15', '30', '45']
	lcfm = len(minlist)

        cur.execute(sql_tmp)

        ix = 0

        for result in cur:

            for i in range(lcfm):

                if str(result[i+1]) == 'None':
                    m_value = 0.0
                else:
                    m_value = result[i+1]

                uxtime = timeTOunixtime(result[0] + minlist[i]) #ELE.YYYYMMDDHH
                # YYYY [0:4], MM [4:6], DD [6:8], HH [8:10], m[10:12]
                week = ('Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat', 'Sun')
                #print "(updateMINONE) ix: %s, i: %s, mdsid: %s, ymd: %s, uxtime: %s, value: %s" %(ix, i, result[8], (result[0]+minlist[i]), uxtime, m_value)
                ix += 1

                htag = 0
                if (week[datetime.date(int(result[0][0:4]), int(result[0][4:6]), int(result[0][6:8])).weekday()] == 'Sun'):
                    htag = 1

                elif (week[datetime.date(int(result[0][0:4]), int(result[0][4:6]), int(result[0][6:8])).weekday()] == 'Sat'):
                    htag = 1

                data = {
                    "metric": "origin_data_please",
                    "timestamp": uxtime,
                    "value": m_value,
                    "tags": {
                        "MDS_ID": result[8],
                        "Saupjang": tagdata[1],
                        "holiday": htag
                    }
                }

                ret = requests.post(url, data=json.dumps(data))


# main function
if __name__ == "__main__":

        sttime = "2016110100"
        entime = "2017043023"

        filename = 'LED_origin_resultcsv' + sttime + "to" + entime + ".txt"
        resultfile = open(filename, "w")
        ix = 1
        tagdata = ['aa', 'aa', 'aa', 'aa', 'aa']
        black_list=[['00-450086507', '1702270072'], ['00-450086533', '1702270080'], ['00-450086513', '1702280006'], ['00-250071576', '1702280008'], ['00-450086531', '1702280012'], ['00-461000010', '2016'], ['00-460003521', '2016'], ['00-460003519', '2016'], ['00-460003515', '2016'], ['00-460003528', '2016'], ['00-460003525', '2016'], ['00-460003527', '2016'], ['00-450083868', '2016'], ['00-450086516', '2016'], ['00-360000014', '20160220113-E1'], ['00-250059914', '201602240026-E1'], ['00-250071059', '201602250030-1'], ['00-250071165', '201602250030-1'], ['00-250130368', '201602260190'], ['00-460001857', '20160725-OMNI'], ['00-451000262', '20162240076-E1'], ['00-360000168', '2016A002'], ['00-360000210', '2016A003'], ['00-360000230', '2016A005'], ['00-360000195', '2016A006'], ['00-360000151', '2016A007'], ['00-360000215', '2016A009'], ['00-360000200', '2016A010'], ['00-360000204', '2016A010'], ['00-360000219', '2016A010'], ['00-360000176', '2016A012'], ['00-360000198', '2016A012'], ['00-360000186', '2016A013'], ['00-460000172', '2016G001'], ['01223299444-0000', '2016G001'], ['00-460000171', '2016G001'], ['00-460000160', '2016G002'], ['00-460000168', '2016G002'], ['00-460003581', '2016G002'], ['01223208784-0000', '2016G002'], ['00-460003582', '2016G003'], ['01223187353-0000', '2016G003'], ['01223299441-0000', '2016G007'], ['01223299437-0000', '2016G008'], ['01221423983-0000', '2016G106'], ['01221392027-0000', '2016G106'], ['01223208824-0000', '2016G107'], ['01221232158-0000', '2016G108'], ['00-360000192', '2016M007'], ['00-360000207', '2016M008'], ['00-360000167', '2016M009'], ['00-360000206', '2016M011'], ['00-360000211', '2016M011'], ['00-360000179', '2016M012'], ['00-250071602', '2016S002'], ['00-250071572', '2016S002'], ['00-250071585', '2016S002'], ['00-250071587', '2016S002'], ['00-250071621', '2016S003'], ['00-250071626', '2016S003'], ['00-250071638', '2016S003'], ['00-250071682', '2016S003'], ['00-250071570', '2016S004'], ['00-250071583', '2016S005'], ['00-250071658', '2016S005'], ['00-250071607', '2016S006'], ['00-250071567', '2016S006'], ['00-250071641', '2016S006'], ['00-250071568', '2016S006'], ['00-250071613', '2016S006'], ['00-250071643', '2016S014'], ['00-250071685', '2016S014'], ['00-250071652', '2016S014'], ['00-250071571', '2016S015'], ['00-250071648', '2016S015'], ['00-250071630', '2016S017'], ['00-250071592', '2016S017'], ['00-360000126', '2016Z001'], ['00-360000135', '2016Z001'], ['00-360000119', '2016Z001'], ['00-360000083', '2016Z001'], ['00-360000082', '2016Z002'], ['00-360000060', '2016Z003'], ['00-360000076', '2016Z003'], ['00-360000112', '2016Z003'], ['00-360000061', '2016Z003'], ['00-360000023', '2016Z004'], ['00-360000026', '2016Z004'], ['00-360000019', '2016Z004'], ['00-360000050', '2016Z004'], ['00-360000030', '2016Z005'], ['00-360000028', '2016Z005'], ['00-360000029', '2016Z005'], ['00-360000027', '2016Z005'], ['00-360000054', '2016Z006'], ['00-360000056', '2016Z006'], ['00-360000064', '2016Z006'], ['00-360000024', '2016Z006'], ['00-360000128', '2016Z007'], ['00-360000133', '2016Z007'], ['00-360000111', '2016Z007'], ['00-360000036', '2016Z008'], ['00-360000033', '2016Z008'], ['00-360000035', '2016Z008'], ['00-360000109', '2016Z008'], ['00-360000095', '2016Z009'], ['00-360000088', '2016Z009'], ['00-360000094', '2016Z009'], ['00-360000084', '2016Z009'], ['00-360000099', '2016Z010'], ['00-360000124', '2016Z010'], ['00-360000138', '2016Z010'], ['00-360000049', '2016Z010'], ['00-360000116', '2016Z010'], ['00-360000102', '2016Z010'], ['00-360000130', '2016Z011'], ['00-360000067', '2016Z011'], ['00-360000139', '2016Z011'], ['00-360000110', '2016Z011'], ['00-360000137', '2016Z011'], ['00-360000009', '2016Z012'], ['00-360000010', '2016Z012'], ['00-360000080', '2016Z013'], ['00-360000055', '2016Z013'], ['00-360000103', '2016Z013'], ['00-360000089', '2016Z014'], ['00-360000087', '2016Z014'], ['00-360000117', '2016Z014'], ['00-360000022', '2016Z015'], ['00-360000018', '2016Z015'], ['00-360000021', '2016Z015'], ['00-360000065', '2016Z016'], ['00-360000078', '2016Z016'], ['00-360000063', '2016Z016'], ['00-460003533', '2016Z018-1'], ['00-460003523', '2016Z019-1'], ['00-460003543', '2016Z023-1'], ['00-250071577', '2017emart11']]

        toendpoint = len(black_list)

        for i in range(toendpoint):

            tagdata = black_list[i]
            mds_id = black_list[i][0]
            # Oracle -> OpenTSDB 기능 실행
            donecheck = updateMINONE(sttime, entime, mds_id, tagdata)
            if donecheck > 0:
                print "들어간 데이터 량" + str(donecheck)

            resultfile.write(str(mds_id) + "," + str(donecheck) + "\n")

            print "ix: %s, mdsid: %s 전체 진행률: %s 퍼센트 진행!" % (ix, mds_id, int(float((ix) / float(toendpoint)) * 100.0))
            ix=ix+1
            resultfile.flush()

	cur.close()
	con.close()


